module test where


let obj
    : { fn: Int -> Int }
    = { fn: \x -> x + 1 }

let a: Int = obj.fn 1!


let fn
    : a -> Int
    = \x -> x


let fn2 = fn<String> 


let extends 
    : Type -> Type -> Constraint.Subtype
    = \a b -> a |-> b

let get
    : String -> (Type |-> Record) -> Type
    = \k r -> r.k

let tsStyle
    : forall a b c, exists f
    . (Show a, Eq b, Functor f)
    , (a |-> { foo: Int, bar: String}, b |-> HideIt, c `extends` a)
    => a -> b -> c -> f <a b c>
    = \x y z -> pure x y z!


let mapType
    : (Type |-> Record) -> Type
    = \t -> fold (\r k -> insert k (mapped k!) r ) {} (keys t!)!
        where 
            mapped = match 
                "foo" -> Int
                k     -> get k t
       

alias Second = Int
type Hidden = exists f a. { of: a -> f <a> }
type Pointed = forall f, exists a. \f -> { of: Show a => a -> f a! }

let pointedVal = { of: n -> [n] } 
    // infer? TParametric (TVar "a") (TRecord [("of", TVar "a" `TArrow` (TApp (TCons "List") (TVar "a")) )])
    // \a -> { of: a -> List a! }

let foo
    : List Int! // TypeExpr: TFnApp (TCons "List") TInteger


data Custom
    :: (Type -> Type) 
    = Simple: Custom <Int>   
    | Product: String -> Custom <Int>
    | Forall: forall a. Custom <a> 
    | Constrained: forall a. Show a => Custom <a> 
    | Parameterized: forall a. a -> Custom <a>
    | Existential: exists a. a -> Custom <Int>
    | Complex: forall a, exists b. Show b, a |-> { id: String } => b -> (String, Int) -> Custom <a>
    | Lambda: forall f, exists a. \f -> Custom <{ of: a -> f <a> }>

type Heterogeneous = forall f, exists a. \f -> f <a>


let hiddenField
    : Hidden
    = { of: x -> Just x } // of is a -> f <a>

let paramConstructor
    : Pointed List!
    = { of: x -> [x] } // x is a, f is List

// would this work?
let h:
    : exists a. a -> Heterogeneous List! <a>
    = \x -> [x]

let array
    : Lift 
    = { of: \n -> [n] } 
let v = array.of 1!

let other
    : Pointed List!
    = { of: \n -> [n] } 


type IntOrString
    :: Type -> Type
    = \x -> if (impl Num: x) 
            then String
            else Bool


data Maybe
    : Type -> Type
    = \x 
        -> Just: x
        |  Nothing


/* Investigate also allowing more compact syntax like 
 * data Either = \e a -> Left: e | Right: a 
 * or
 * data Either = \e a 
    -> Left: e 
     | Right: a -- possibly leveraging union types?
*/ 
data Either 
    : Type -> Type -> Type
    = Left: forall a. e -> Either e a!
    | Right: forall e. a -> Either e a!


 
// is this allowed?  
let e: Either <string> :: Type -> Type 

type Show
    :: Type -> Protocol
    = forall a. \a -> { show: a -> String }

type Functor 
    :: (Type -> Type) -> Protocol
    = \f -> 
        { map: forall a b. (a -> b) -> f a -> f b
        }

type Ord
    :: Type -> Protocol
    = forall a. Eq a => \a -> 
        { compare: a -> a -> Ordering
        , ((<), (<=), (>=), (>)) : a -> a -> Bool
        , (max, min)             v: a -> a -> a
        }




let functorEitherImpl 
    : impl Functor: forall e. Either e! 
    :: Type -> Type
    = { map: \f fab -> case fab of
            Right a -> Right $ f a!
            e -> e
      }

let strEitherImp =  functorEitherImpl<String>   

let functorListImpl
    : impl Functor: List =
    { map = \f fa -> case fab of
        []           -> []
        (head, tail) -> (f head! : map f tail!)
    } 

let ordImpl
    : with myTypeEqImpl => impl Ord: MyType =
    { impl... }



type Foo = \f -> f Int!

type Bar = Foo List!

let fn
    : forall f. \f -> f Int! -> String // 
    = \container -> "yo"

let fnSet
    : (typeof fn) Set!
    = \set -> "yo"

let s = fn @List [1,2,3]  
    


type Obj = { value: String }
let objDisplay 
    : impl Show: Obj = 
    { show: o -> o.value }


let display
    : forall a. a implements Show => a -> a -> String
    = \s1 s2 -> show s1! ++ show s2!


let str = display { value: "hello "}!



let complex
    :type \a -> a -> List a! 
    :kind Type -> Type
    :qualify forall a
    :quantify Linear -> Linear
    :mode Lazy
    :constraint Show a
    :constraint a extends {} 
     

    = \elem -> [elem]



import P
