
let hof = \f -> f 1!

let i
    : Int -> Bool -> String 
    = \a b -> "hello"

let obj
    : { method: Int -> Int
      , foo: 
        { bar: Int 
        } 
      }
    = { method: \x -> x + 1 
      , foo: { bar: 0 }
      }


let fn
    : a -> Int
    = \x -> x 

let field = obj.foo.bar
let path = .foo.bar

let result = (get ob!.method) 1!

let next
    = update (.foo.bar) (\n -> n + 1) obj!

let modified
    = modify (.foo.bar) (\n -> n + 1) obj!



data MyType
  = Foo: Int
  | Bar: String -> Bool
  | Baz: \a => custom -> a
  where custom = String


type TypeFn = \a => { val: a }
type Foo = TypeFn Int!

type GenericType = \f => f Foo!
type TyBindings = foo -> Int
  where foo = String


type Functor
  :: Protocol (Type -> Type) 
  = \f => 
    { map: \a b => (a -> b) -> f a! -> f b! }



let listFunctorImpl
  : impl Functor: List
  = { map: \f fa -> someDummyImpl f fa!}



let fmap
  : \f a b => (a -> b) -> f a! -> f b! where f implements Functor
  = \f fa -> match fa
      | []          -> fa
      | [x | rest]  -> f x! |> prepend (fmap f rest!)!
                      


type Union =
  | \a => Foo: { stuff: a }
  | Bar: String
  | Baz 

  

let try
  : String -> Promise Int!
  = \url -> { 
        val1 <- fetch url!
        val2 <- fetch url!
        return val1 + val2
        }


let foo = \x -> match x 
            | 1 -> fn x
            | otherwise -> "fail"

let fn
  : \t => NonNeg -> t 
    where NonNeg = t | \n -> n > 0
  
  = \gt0 -> gt0 + 10




let div
  : \a => a -> NonZero -> a 
    where 
      a implements Num
      NonZero = a | \n -> n != 0

  = \a b -> a / b



type ClosedStringIndexedStruct = { bar: Int, baz: String }
type OpenStringIndexedStruct = \r => { bar: Int, baz: String | r }

type OpenIntIndexedStruct = \r => { 1: String, 2: Int | r }


type Foo = \r => { [0,0]: String, [0,1]: Int | r }

type Sub1 = Foo Empty [0]  // { 0: String, 1: Int }  => all the values indexed by the first placed key 0
type Sub2 = Foo Empty [,0] // String                 => the single field indexed by the second placed key 0

type Table 
  : Row Type Type -> Type
  = \r => { | r }

type Record 
  : Row String Type -> Type
  = \r => { | r }

type Record = { | r } 
  where r [String]

type Bar = { [Int, String], "foo": Int } 

let b = { [1, "foo"], [2, "bar"] }
let b1 = b[1]
let b_foo = b["foo"]