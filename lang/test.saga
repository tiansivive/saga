
let hof = \f -> f 1!

let i
    : Int -> Bool -> String 
    = \a b -> "hello"

let obj
    : { method: Int -> Int
      , foo: 
        { bar: Int 
        } 
      }
    = { method: \x -> x + 1 
      , foo: { bar: 0 }
      }


let fn
    : a -> Int
    = \x -> x 

let field = obj.foo.bar
let path = .foo.bar

let result = (get ob!.method) 1!

let next
    = update (.foo.bar) (\n -> n + 1) obj!

let modified
    = modify (.foo.bar) (\n -> n + 1) obj!



data MyType
  = Foo: Int
  | Bar: String -> Bool
  | Baz: \a => custom -> a
  where custom = String


type TypeFn = \a => { val: a }
type Foo = TypeFn Int!

type GenericType = \f => f Foo!
type TyBindings = foo -> Int
  where foo = String


type Functor
  :: Protocol (Type -> Type) 
  = \f => 
    { map: \a b => (a -> b) -> f a! -> f b! }



let listFunctorImpl
  : impl Functor: List
  = { map: \f fa -> someDummyImpl f fa!}



let fmap
  : \f a b => (a -> b) -> f a! -> f b! where f implements Functor
  = \f fa -> match fa
      | []          -> fa
      | [x | rest]  -> f x! |> prepend (fmap f rest!)!
                      


type Union =
  | \a => Foo: { stuff: a }
  | Bar: String
  | Baz 

  

let try
  : String -> Promise Int!
  = \url -> { 
        val1 <- fetch url!
        val2 <- fetch url!
        return val1 + val2
        }


let foo = \x -> match x 
            | 1 -> fn x
            | otherwise -> "fail"

let fn
  : \t => NonNeg -> t 
    where NonNeg = t | \n -> n > 0
  
  = \gt0 -> gt0 + 10



-- | Modelling fn's Type
tvar = Var.Type "t" K.Type
nonNeg = Var.Local "NonNeg"

gt0 = L.BinaryOp L.GT (L.Var $ Var.Refinement "n") (L.Literal $ LInt 0)
refinement = Q.Refinement gt0 (T.Var tvar)

binding = (nonNeg, Map.empty := [refinement] :=> T.Var tvar)
fnTy = Polymorphic [tvar] ([binding] := [] :=> T.Var nonNeg `T.Arrow` T.Var tvar)

-- | emitted constraints while traversing foo 
lvl = 0
tvarX = Var.Unification "u1" lvl
Eq e1 (tvarX) (T.Singleton $ LInt 1)

r1 = Var.Refinement "r1"
eqTo1 = L.BinaryOp L.Eq (L.Var r1) (L.Literal $ L.Int 1)
assumps = [Q.Refined (T.Var r1) eqTo1, Eq e2 (Mono $ T.Var r1) (Unification tvarX)  ]

Implication [] assumps <constraint emitted by traversing 'fn x'>



-- | Solving refinements when applying x to fn





