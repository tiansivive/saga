
let complex
    :type \a -> a -> List a! 
    :kind Type -> Type
    :qualify forall a
    :quantify Linear -> Linear
    :mode Lazy
    :constraint Show a
    :constraint a extends {} 
     

    = \elem -> [elem]




let complex2
    :type 
        Int         :refine \x -> x > 0
        ->                                     :resource Linear
        String      :refine \x -> x > 0
        ->                                     :resource Linear
        a           :kind Type :qualify forall :resource Affine 
                    :implements Show :extends { status: String }
                    :refine \x -> x.tag != "status"
        -> 
        b           :kind Type :qualify forall :resource Affine 
        -> 
        Maybe a 
       
       
    :mode Strict    
    = \n s a b -> Just a!


type Nat
    :kind Type
    :refined \x => x >= 0
    = Int


let otherIdeas
    : \a b c => nat -> status -> b -> fn -> Maybe c
    = \nat status b fn -> Just b.tag

    :describe type
        :constraints a impl Show, b extends { tag: c }
        :quantify forall a b, exists c
        :kind Type -> Type -> Type -> Type
        :where 
            status = String
            fn  = a -> c
            nat :kind Refined
                :resource Linear 
                :refine \x => x >= 0
                = Int 

let natural                                                                                                                                                                                                                                                                                                                                                                                                                                                           
    : Nat
    = 1



let fn
    : Type -> Type
    : \a => num -> tag -> a
        where 
            num = Int | Float
            num | \x -> x > 0
            tag = Foo | Bar
            a implements Show, Eq
            a extends \x => { value: x, tag: Tag }

            quantify forall a  
    = \n tag -> { value: n, tag } 
