
let complex
    :type \a -> a -> List a! 
    :kind Type -> Type
    :qualify forall a
    :quantify Linear -> Linear
    :mode Lazy
    :constraint Show a
    :constraint a extends {} 
     

    = \elem -> [elem]




let complex2
    :type 
        Int         :refine \x -> x > 0
        ->                                     :resource Linear
        String      :refine \x -> x > 0
        ->                                     :resource Linear
        a           :kind Type :qualify forall :resource Affine 
                    :implements Show :extends { status: String }
                    :refine \x -> x.tag != "status"
        -> 
        b           :kind Type :qualify forall :resource Affine 
        -> 
        Maybe a 
       
       
    :mode Strict    
    = \n s a b -> Just a!


type Nat
    :kind Type
    :refined \x => x >= 0
    = Int


let otherIdeas
    : \a b c => nat -> status -> b -> fn -> Maybe c
    = \nat status b fn -> Just b.tag

    :describe type
        :constraints a impl Show, b extends { tag: c }
        :quantify forall a b, exists c
        :kind Type -> Type -> Type -> Type
        :where 
            status = String
            fn  = a -> c
            nat :kind Refined
                :resource Linear 
                :refine \x => x >= 0
                = Int 

let natural                                                                                                                                                                                                                                                                                                                                                                                                                                                           
    : Nat
    = 1



let fn
    : Type -> Type
    : \a => num -> tag -> a
        where 
            num = Int | Float
            num | \x -> x > 0
            tag = Foo | Bar
            a implements Show, Eq
            a extends \x => { value: x, tag: Tag }

            quantify forall a  
    = \n tag -> { value: n, tag } 


let gt10
    : Nat -> Nat -> GT10
        where
            @tag X Y Z
            Nat = Int | \x -> x > 0
            GT10 = Nat | \_ -> X + Y > 10

    = \x y -> x + y 

let under10 = gt10 1 1! // fail typechecking
let over10 = gt10 1 10! // pass typechecking

let mul2 // Infer: x > 0, x + x > 10
    = \x -> gt10 x x! 

let defY // Infer: x > 0, x + (x + 1) > 10
    = \x -> {
        let y = x + 1
        return gt10 x y! 
    }

let compute 
    # Infer: external: Num -> T1 
            where 
                Num = Int | \x -> x > 0
                T1 = Int | \x -> Num + x > 10
    = \x -> {
        let y = external x! // x > 0, (external x!) + x > 0, 
        return gt10 x y! 
    } 



// function Overloads 

let fn
    : \f a => 
    | One: ( Int    -> String -> f Int!    )
    | Two: ( Bool   -> a      -> f String! )
    | Foo: ( String -> a      -> f Bool!   )
    | Bar: ( Int    -> Int    -> f Int!    )
    where 
        f implements Functor
        a implements Show
    
    = \match 
        | One: i str -> of <| length str! + i
        | Two: b a   -> of <|
            if b then show a!
            else "None!"
        | Foo: str a -> of <| str ++ show a!
        | Bar: i j   -> of <| i + j
