-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from src/Saga/Parser/Parser.y
-----------------------------------------------------------------------------

state 18 contains 1 shift/reduce conflicts.
state 24 contains 1 shift/reduce conflicts.
state 31 contains 1 shift/reduce conflicts.

rule 68 is unused

terminal '==' is unused
terminal '!=' is unused
terminal op is unused
terminal let is unused
terminal match is unused
terminal '|' is unused
terminal newline is unused
terminal eof is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseSagaScript -> script                   (0)
	%start_parseSagaExpr -> expr                       (1)
	identifier -> id                                   (2)
	path -> identifier                                 (3)
	path -> identifier '.' path                        (4)
	pairs ->                                           (5)
	pairs -> identifier ':' expr ',' pairs             (6)
	pairs -> identifier ':' expr                       (7)
	record -> '{' pairs '}'                            (8)
	listElements ->                                    (9)
	listElements -> expr                               (10)
	listElements -> expr ',' listElements              (11)
	list -> '[' listElements ']'                       (12)
	tupleElems -> ',' expr                             (13)
	tupleElems -> ',' expr tupleElems                  (14)
	tuple -> '(' expr tupleElems ')'                   (15)
	args ->                                            (16)
	args -> identifier args                            (17)
	lambda -> '\\' args '->' expr                      (18)
	params ->                                          (19)
	params -> atom params                              (20)
	fnApplication -> atom params '!'                   (21)
	controlFlow -> if expr then expr else expr         (22)
	clause -> with declarations                        (23)
	block -> return expr                               (24)
	block -> expr block                                (25)
	term -> number                                     (26)
	term -> string                                     (27)
	term -> boolean                                    (28)
	term -> tuple                                      (29)
	term -> list                                       (30)
	term -> record                                     (31)
	atom -> identifier                                 (32)
	atom -> term                                       (33)
	atom -> '{' block '}'                              (34)
	atom -> '(' expr ')'                               (35)
	expr -> controlFlow                                (36)
	expr -> fnApplication                              (37)
	expr -> lambda                                     (38)
	expr -> clause in expr                             (39)
	expr -> atom                                       (40)
	expr -> identifier '=' expr                        (41)
	expr -> expr '+' expr                              (42)
	expr -> expr '-' expr                              (43)
	expr -> expr '*' expr                              (44)
	expr -> expr '/' expr                              (45)
	expr -> expr '<' expr                              (46)
	expr -> expr '<=' expr                             (47)
	expr -> expr '>' expr                              (48)
	expr -> expr '>=' expr                             (49)
	expr -> expr '||' expr                             (50)
	expr -> expr '&&' expr                             (51)
	tpairs ->                                          (52)
	tpairs -> identifier ':' typeExpr ',' tpairs       (53)
	tpairs -> identifier ':' typeExpr                  (54)
	trecord -> '{' tpairs '}'                          (55)
	ttupleElems -> ',' typeExpr                        (56)
	ttupleElems -> ',' typeExpr ttupleElems            (57)
	ttuple -> '(' typeExpr ttupleElems ')'             (58)
	type -> number                                     (59)
	type -> string                                     (60)
	type -> boolean                                    (61)
	type -> ttuple                                     (62)
	type -> trecord                                    (63)
	type -> identifier                                 (64)
	typeExpr -> type                                   (65)
	typeExpr -> if typeExpr then typeExpr else typeExpr   (66)
	typeExpr -> '(' typeExpr ')'                       (67)
	typeAnnotation ->                                  (68)
	typeAnnotation -> identifier ':' typeExpr          (69)
	dec -> typeAnnotation identifier '=' expr          (70)
	declarations ->                                    (71)
	declarations -> dec declarations                   (72)
	moduleDef -> module path where                     (73)
	importMod -> import path                           (74)
	imports ->                                         (75)
	imports -> importMod imports                       (76)
	script -> moduleDef declarations imports           (77)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	id             { L.RangedToken (T.Id _) _ }
	number         { L.RangedToken (T.Number _) _ }
	string         { L.RangedToken (T.String _) _ }
	boolean        { L.RangedToken (T.Boolean _) _ }
	'!'            { L.RangedToken (T.Operator "!") _ }
	'+'            { L.RangedToken (T.Operator "+") _ }
	'-'            { L.RangedToken (T.Operator "-") _ }
	'*'            { L.RangedToken (T.Operator "*") _ }
	'/'            { L.RangedToken (T.Operator "/") _ }
	'=='           { L.RangedToken (T.Operator "==") _ }
	'!='           { L.RangedToken (T.Operator "!=") _ }
	'<'            { L.RangedToken (T.Operator "<") _ }
	'<='           { L.RangedToken (T.Operator "<=") _ }
	'>'            { L.RangedToken (T.Operator ">") _ }
	'>='           { L.RangedToken (T.Operator ">=") _ }
	'||'           { L.RangedToken (T.Operator "||") _ }
	'&&'           { L.RangedToken (T.Operator "&&") _ }
	op             { L.RangedToken (T.Operator _) _ }
	let            { L.RangedToken T.Let _ }
	in             { L.RangedToken T.In _ }
	where          { L.RangedToken T.Where _ }
	with           { L.RangedToken T.With _ }
	if             { L.RangedToken T.If _ }
	then           { L.RangedToken T.Then _ }
	else           { L.RangedToken T.Else _ }
	match          { L.RangedToken T.Match _ }
	return         { L.RangedToken T.Return _ }
	module         { L.RangedToken T.Module _ }
	import         { L.RangedToken T.Import _ }
	'('            { L.RangedToken T.LParen _ }
	')'            { L.RangedToken T.RParen _ }
	'['            { L.RangedToken T.LBrack _ }
	']'            { L.RangedToken T.RBrack _ }
	'{'            { L.RangedToken T.LCurly _ }
	'}'            { L.RangedToken T.RCurly _ }
	':'            { L.RangedToken T.Colon _ }
	','            { L.RangedToken T.Comma _ }
	'->'           { L.RangedToken T.Arrow _ }
	'='            { L.RangedToken T.Equals _ }
	'|'            { L.RangedToken T.Pipe _ }
	'.'            { L.RangedToken T.Dot _ }
	'\\'           { L.RangedToken T.BackSlash _ }
	newline        { L.RangedToken T.Newline _ }
	eof            { L.RangedToken T.EOF _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseSagaScript rule  0
	%start_parseSagaExpr rule  1
	identifier      rule  2
	path            rules 3, 4
	pairs           rules 5, 6, 7
	record          rule  8
	listElements    rules 9, 10, 11
	list            rule  12
	tupleElems      rules 13, 14
	tuple           rule  15
	args            rules 16, 17
	lambda          rule  18
	params          rules 19, 20
	fnApplication   rule  21
	controlFlow     rule  22
	clause          rule  23
	block           rules 24, 25
	term            rules 26, 27, 28, 29, 30, 31
	atom            rules 32, 33, 34, 35
	expr            rules 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
	tpairs          rules 52, 53, 54
	trecord         rule  55
	ttupleElems     rules 56, 57
	ttuple          rule  58
	type            rules 59, 60, 61, 62, 63, 64
	typeExpr        rules 65, 66, 67
	typeAnnotation  rules 68, 69
	dec             rule  70
	declarations    rules 71, 72
	moduleDef       rule  73
	importMod       rule  74
	imports         rules 75, 76
	script          rule  77

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseSagaScript -> . script                  (rule 0)

	module         shift, and enter state 26

	moduleDef      goto state 24
	script         goto state 25

State 1

	%start_parseSagaExpr -> . expr                      (rule 1)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 14

State 2

	identifier -> . id                                  (rule 2)

	id             shift, and enter state 3


State 3

	identifier -> id .                                  (rule 2)

	id             reduce using rule 2
	number         reduce using rule 2
	string         reduce using rule 2
	boolean        reduce using rule 2
	'!'            reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            reduce using rule 2
	'/'            reduce using rule 2
	'<'            reduce using rule 2
	'<='           reduce using rule 2
	'>'            reduce using rule 2
	'>='           reduce using rule 2
	'||'           reduce using rule 2
	'&&'           reduce using rule 2
	in             reduce using rule 2
	where          reduce using rule 2
	with           reduce using rule 2
	if             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	return         reduce using rule 2
	import         reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	'['            reduce using rule 2
	']'            reduce using rule 2
	'{'            reduce using rule 2
	'}'            reduce using rule 2
	':'            reduce using rule 2
	','            reduce using rule 2
	'->'           reduce using rule 2
	'='            reduce using rule 2
	'.'            reduce using rule 2
	'\\'           reduce using rule 2
	%eof           reduce using rule 2


State 4

	atom -> identifier .                                (rule 32)
	expr -> identifier . '=' expr                       (rule 41)

	id             reduce using rule 32
	number         reduce using rule 32
	string         reduce using rule 32
	boolean        reduce using rule 32
	'!'            reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'<'            reduce using rule 32
	'<='           reduce using rule 32
	'>'            reduce using rule 32
	'>='           reduce using rule 32
	'||'           reduce using rule 32
	'&&'           reduce using rule 32
	in             reduce using rule 32
	with           reduce using rule 32
	if             reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	return         reduce using rule 32
	import         reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	'['            reduce using rule 32
	']'            reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32
	','            reduce using rule 32
	'='            shift, and enter state 59
	'\\'           reduce using rule 32
	%eof           reduce using rule 32


State 5

	term -> record .                                    (rule 31)

	id             reduce using rule 31
	number         reduce using rule 31
	string         reduce using rule 31
	boolean        reduce using rule 31
	'!'            reduce using rule 31
	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	'<'            reduce using rule 31
	'<='           reduce using rule 31
	'>'            reduce using rule 31
	'>='           reduce using rule 31
	'||'           reduce using rule 31
	'&&'           reduce using rule 31
	in             reduce using rule 31
	with           reduce using rule 31
	if             reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	return         reduce using rule 31
	import         reduce using rule 31
	'('            reduce using rule 31
	')'            reduce using rule 31
	'['            reduce using rule 31
	']'            reduce using rule 31
	'{'            reduce using rule 31
	'}'            reduce using rule 31
	','            reduce using rule 31
	'\\'           reduce using rule 31
	%eof           reduce using rule 31


State 6

	term -> list .                                      (rule 30)

	id             reduce using rule 30
	number         reduce using rule 30
	string         reduce using rule 30
	boolean        reduce using rule 30
	'!'            reduce using rule 30
	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	'<'            reduce using rule 30
	'<='           reduce using rule 30
	'>'            reduce using rule 30
	'>='           reduce using rule 30
	'||'           reduce using rule 30
	'&&'           reduce using rule 30
	in             reduce using rule 30
	with           reduce using rule 30
	if             reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	return         reduce using rule 30
	import         reduce using rule 30
	'('            reduce using rule 30
	')'            reduce using rule 30
	'['            reduce using rule 30
	']'            reduce using rule 30
	'{'            reduce using rule 30
	'}'            reduce using rule 30
	','            reduce using rule 30
	'\\'           reduce using rule 30
	%eof           reduce using rule 30


State 7

	term -> tuple .                                     (rule 29)

	id             reduce using rule 29
	number         reduce using rule 29
	string         reduce using rule 29
	boolean        reduce using rule 29
	'!'            reduce using rule 29
	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	'<'            reduce using rule 29
	'<='           reduce using rule 29
	'>'            reduce using rule 29
	'>='           reduce using rule 29
	'||'           reduce using rule 29
	'&&'           reduce using rule 29
	in             reduce using rule 29
	with           reduce using rule 29
	if             reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	return         reduce using rule 29
	import         reduce using rule 29
	'('            reduce using rule 29
	')'            reduce using rule 29
	'['            reduce using rule 29
	']'            reduce using rule 29
	'{'            reduce using rule 29
	'}'            reduce using rule 29
	','            reduce using rule 29
	'\\'           reduce using rule 29
	%eof           reduce using rule 29


State 8

	expr -> lambda .                                    (rule 38)

	id             reduce using rule 38
	number         reduce using rule 38
	string         reduce using rule 38
	boolean        reduce using rule 38
	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'*'            reduce using rule 38
	'/'            reduce using rule 38
	'<'            reduce using rule 38
	'<='           reduce using rule 38
	'>'            reduce using rule 38
	'>='           reduce using rule 38
	'||'           reduce using rule 38
	'&&'           reduce using rule 38
	in             reduce using rule 38
	with           reduce using rule 38
	if             reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	return         reduce using rule 38
	import         reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	'['            reduce using rule 38
	']'            reduce using rule 38
	'{'            reduce using rule 38
	'}'            reduce using rule 38
	','            reduce using rule 38
	'\\'           reduce using rule 38
	%eof           reduce using rule 38


State 9

	expr -> fnApplication .                             (rule 37)

	id             reduce using rule 37
	number         reduce using rule 37
	string         reduce using rule 37
	boolean        reduce using rule 37
	'+'            reduce using rule 37
	'-'            reduce using rule 37
	'*'            reduce using rule 37
	'/'            reduce using rule 37
	'<'            reduce using rule 37
	'<='           reduce using rule 37
	'>'            reduce using rule 37
	'>='           reduce using rule 37
	'||'           reduce using rule 37
	'&&'           reduce using rule 37
	in             reduce using rule 37
	with           reduce using rule 37
	if             reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	return         reduce using rule 37
	import         reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37
	'['            reduce using rule 37
	']'            reduce using rule 37
	'{'            reduce using rule 37
	'}'            reduce using rule 37
	','            reduce using rule 37
	'\\'           reduce using rule 37
	%eof           reduce using rule 37


State 10

	expr -> controlFlow .                               (rule 36)

	id             reduce using rule 36
	number         reduce using rule 36
	string         reduce using rule 36
	boolean        reduce using rule 36
	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            reduce using rule 36
	'/'            reduce using rule 36
	'<'            reduce using rule 36
	'<='           reduce using rule 36
	'>'            reduce using rule 36
	'>='           reduce using rule 36
	'||'           reduce using rule 36
	'&&'           reduce using rule 36
	in             reduce using rule 36
	with           reduce using rule 36
	if             reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	return         reduce using rule 36
	import         reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	'['            reduce using rule 36
	']'            reduce using rule 36
	'{'            reduce using rule 36
	'}'            reduce using rule 36
	','            reduce using rule 36
	'\\'           reduce using rule 36
	%eof           reduce using rule 36


State 11

	expr -> clause . in expr                            (rule 39)

	in             shift, and enter state 58


State 12

	atom -> term .                                      (rule 33)

	id             reduce using rule 33
	number         reduce using rule 33
	string         reduce using rule 33
	boolean        reduce using rule 33
	'!'            reduce using rule 33
	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	'<'            reduce using rule 33
	'<='           reduce using rule 33
	'>'            reduce using rule 33
	'>='           reduce using rule 33
	'||'           reduce using rule 33
	'&&'           reduce using rule 33
	in             reduce using rule 33
	with           reduce using rule 33
	if             reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	return         reduce using rule 33
	import         reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	'['            reduce using rule 33
	']'            reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33
	','            reduce using rule 33
	'\\'           reduce using rule 33
	%eof           reduce using rule 33


State 13

	fnApplication -> atom . params '!'                  (rule 21)
	expr -> atom .                                      (rule 40)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	'!'            reduce using rule 19
	'+'            reduce using rule 40
	'-'            reduce using rule 40
	'*'            reduce using rule 40
	'/'            reduce using rule 40
	'<'            reduce using rule 40
	'<='           reduce using rule 40
	'>'            reduce using rule 40
	'>='           reduce using rule 40
	'||'           reduce using rule 40
	'&&'           reduce using rule 40
	in             reduce using rule 40
	with           reduce using rule 40
	if             reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	return         reduce using rule 40
	import         reduce using rule 40
	'('            shift, and enter state 20
	')'            reduce using rule 40
	'['            shift, and enter state 21
	']'            reduce using rule 40
	'{'            shift, and enter state 22
	'}'            reduce using rule 40
	','            reduce using rule 40
	'\\'           reduce using rule 40
	%eof           reduce using rule 40

	identifier     goto state 55
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	params         goto state 56
	term           goto state 12
	atom           goto state 57

State 14

	%start_parseSagaExpr -> expr .                      (rule 1)
	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           shift, and enter state 53
	'&&'           shift, and enter state 54
	%eof           accept


State 15

	term -> number .                                    (rule 26)

	id             reduce using rule 26
	number         reduce using rule 26
	string         reduce using rule 26
	boolean        reduce using rule 26
	'!'            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	'<'            reduce using rule 26
	'<='           reduce using rule 26
	'>'            reduce using rule 26
	'>='           reduce using rule 26
	'||'           reduce using rule 26
	'&&'           reduce using rule 26
	in             reduce using rule 26
	with           reduce using rule 26
	if             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	return         reduce using rule 26
	import         reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'['            reduce using rule 26
	']'            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	','            reduce using rule 26
	'\\'           reduce using rule 26
	%eof           reduce using rule 26


State 16

	term -> string .                                    (rule 27)

	id             reduce using rule 27
	number         reduce using rule 27
	string         reduce using rule 27
	boolean        reduce using rule 27
	'!'            reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	'<'            reduce using rule 27
	'<='           reduce using rule 27
	'>'            reduce using rule 27
	'>='           reduce using rule 27
	'||'           reduce using rule 27
	'&&'           reduce using rule 27
	in             reduce using rule 27
	with           reduce using rule 27
	if             reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	return         reduce using rule 27
	import         reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	'['            reduce using rule 27
	']'            reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	','            reduce using rule 27
	'\\'           reduce using rule 27
	%eof           reduce using rule 27


State 17

	term -> boolean .                                   (rule 28)

	id             reduce using rule 28
	number         reduce using rule 28
	string         reduce using rule 28
	boolean        reduce using rule 28
	'!'            reduce using rule 28
	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'*'            reduce using rule 28
	'/'            reduce using rule 28
	'<'            reduce using rule 28
	'<='           reduce using rule 28
	'>'            reduce using rule 28
	'>='           reduce using rule 28
	'||'           reduce using rule 28
	'&&'           reduce using rule 28
	in             reduce using rule 28
	with           reduce using rule 28
	if             reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	return         reduce using rule 28
	import         reduce using rule 28
	'('            reduce using rule 28
	')'            reduce using rule 28
	'['            reduce using rule 28
	']'            reduce using rule 28
	'{'            reduce using rule 28
	'}'            reduce using rule 28
	','            reduce using rule 28
	'\\'           reduce using rule 28
	%eof           reduce using rule 28


State 18

	clause -> with . declarations                       (rule 23)

	id             shift, and enter state 3
			(reduce using rule 68)

	in             reduce using rule 71

	identifier     goto state 29
	typeAnnotation goto state 30
	dec            goto state 31
	declarations   goto state 44

State 19

	controlFlow -> if . expr then expr else expr        (rule 22)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 43

State 20

	tuple -> '(' . expr tupleElems ')'                  (rule 15)
	atom -> '(' . expr ')'                              (rule 35)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 42

State 21

	list -> '[' . listElements ']'                      (rule 12)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	']'            reduce using rule 9
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	listElements   goto state 40
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 41

State 22

	record -> '{' . pairs '}'                           (rule 8)
	atom -> '{' . block '}'                             (rule 34)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	return         shift, and enter state 39
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'}'            reduce using rule 5
	'\\'           shift, and enter state 23

	identifier     goto state 35
	pairs          goto state 36
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	block          goto state 37
	term           goto state 12
	atom           goto state 13
	expr           goto state 38

State 23

	lambda -> '\\' . args '->' expr                     (rule 18)

	id             shift, and enter state 3
	'->'           reduce using rule 16

	identifier     goto state 33
	args           goto state 34

State 24

	script -> moduleDef . declarations imports          (rule 77)

	id             shift, and enter state 3
			(reduce using rule 68)

	import         reduce using rule 71
	%eof           reduce using rule 71

	identifier     goto state 29
	typeAnnotation goto state 30
	dec            goto state 31
	declarations   goto state 32

State 25

	%start_parseSagaScript -> script .                  (rule 0)

	%eof           accept


State 26

	moduleDef -> module . path where                    (rule 73)

	id             shift, and enter state 3

	identifier     goto state 27
	path           goto state 28

State 27

	path -> identifier .                                (rule 3)
	path -> identifier . '.' path                       (rule 4)

	where          reduce using rule 3
	import         reduce using rule 3
	'.'            shift, and enter state 94
	%eof           reduce using rule 3


State 28

	moduleDef -> module path . where                    (rule 73)

	where          shift, and enter state 93


State 29

	typeAnnotation -> identifier . ':' typeExpr         (rule 69)

	':'            shift, and enter state 92


State 30

	dec -> typeAnnotation . identifier '=' expr         (rule 70)

	id             shift, and enter state 3

	identifier     goto state 91

State 31

	declarations -> dec . declarations                  (rule 72)

	id             shift, and enter state 3
			(reduce using rule 68)

	in             reduce using rule 71
	import         reduce using rule 71
	%eof           reduce using rule 71

	identifier     goto state 29
	typeAnnotation goto state 30
	dec            goto state 31
	declarations   goto state 90

State 32

	script -> moduleDef declarations . imports          (rule 77)

	import         shift, and enter state 89
	%eof           reduce using rule 75

	importMod      goto state 87
	imports        goto state 88

State 33

	args -> identifier . args                           (rule 17)

	id             shift, and enter state 3
	'->'           reduce using rule 16

	identifier     goto state 33
	args           goto state 86

State 34

	lambda -> '\\' args . '->' expr                     (rule 18)

	'->'           shift, and enter state 85


State 35

	pairs -> identifier . ':' expr ',' pairs            (rule 6)
	pairs -> identifier . ':' expr                      (rule 7)
	atom -> identifier .                                (rule 32)
	expr -> identifier . '=' expr                       (rule 41)

	id             reduce using rule 32
	number         reduce using rule 32
	string         reduce using rule 32
	boolean        reduce using rule 32
	'!'            reduce using rule 32
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	'<'            reduce using rule 32
	'<='           reduce using rule 32
	'>'            reduce using rule 32
	'>='           reduce using rule 32
	'||'           reduce using rule 32
	'&&'           reduce using rule 32
	with           reduce using rule 32
	if             reduce using rule 32
	return         reduce using rule 32
	'('            reduce using rule 32
	'['            reduce using rule 32
	'{'            reduce using rule 32
	':'            shift, and enter state 84
	'='            shift, and enter state 59
	'\\'           reduce using rule 32


State 36

	record -> '{' pairs . '}'                           (rule 8)

	'}'            shift, and enter state 83


State 37

	atom -> '{' block . '}'                             (rule 34)

	'}'            shift, and enter state 82


State 38

	block -> expr . block                               (rule 25)
	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           shift, and enter state 53
	'&&'           shift, and enter state 54
	with           shift, and enter state 18
	if             shift, and enter state 19
	return         shift, and enter state 39
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	block          goto state 81
	term           goto state 12
	atom           goto state 13
	expr           goto state 38

State 39

	block -> return . expr                              (rule 24)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 80

State 40

	list -> '[' listElements . ']'                      (rule 12)

	']'            shift, and enter state 79


State 41

	listElements -> expr .                              (rule 10)
	listElements -> expr . ',' listElements             (rule 11)
	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           shift, and enter state 53
	'&&'           shift, and enter state 54
	']'            reduce using rule 10
	','            shift, and enter state 78


State 42

	tuple -> '(' expr . tupleElems ')'                  (rule 15)
	atom -> '(' expr . ')'                              (rule 35)
	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           shift, and enter state 53
	'&&'           shift, and enter state 54
	')'            shift, and enter state 76
	','            shift, and enter state 77

	tupleElems     goto state 75

State 43

	controlFlow -> if expr . then expr else expr        (rule 22)
	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           shift, and enter state 53
	'&&'           shift, and enter state 54
	then           shift, and enter state 74


State 44

	clause -> with declarations .                       (rule 23)

	in             reduce using rule 23


State 45

	expr -> expr '+' . expr                             (rule 42)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 73

State 46

	expr -> expr '-' . expr                             (rule 43)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 72

State 47

	expr -> expr '*' . expr                             (rule 44)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 71

State 48

	expr -> expr '/' . expr                             (rule 45)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 70

State 49

	expr -> expr '<' . expr                             (rule 46)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 69

State 50

	expr -> expr '<=' . expr                            (rule 47)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 68

State 51

	expr -> expr '>' . expr                             (rule 48)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 67

State 52

	expr -> expr '>=' . expr                            (rule 49)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 66

State 53

	expr -> expr '||' . expr                            (rule 50)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 65

State 54

	expr -> expr '&&' . expr                            (rule 51)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 64

State 55

	atom -> identifier .                                (rule 32)

	id             reduce using rule 32
	number         reduce using rule 32
	string         reduce using rule 32
	boolean        reduce using rule 32
	'!'            reduce using rule 32
	'('            reduce using rule 32
	'['            reduce using rule 32
	'{'            reduce using rule 32


State 56

	fnApplication -> atom params . '!'                  (rule 21)

	'!'            shift, and enter state 63


State 57

	params -> atom . params                             (rule 20)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	'!'            reduce using rule 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22

	identifier     goto state 55
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	params         goto state 62
	term           goto state 12
	atom           goto state 57

State 58

	expr -> clause in . expr                            (rule 39)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 61

State 59

	expr -> identifier '=' . expr                       (rule 41)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 60

State 60

	expr -> identifier '=' expr .                       (rule 41)
	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	id             reduce using rule 41
	number         reduce using rule 41
	string         reduce using rule 41
	boolean        reduce using rule 41
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'||'           reduce using rule 41
	'&&'           reduce using rule 41
	in             reduce using rule 41
	with           reduce using rule 41
	if             reduce using rule 41
	then           reduce using rule 41
	else           reduce using rule 41
	return         reduce using rule 41
	import         reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	'['            reduce using rule 41
	']'            reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41
	','            reduce using rule 41
	'\\'           reduce using rule 41
	%eof           reduce using rule 41


State 61

	expr -> clause in expr .                            (rule 39)
	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	id             reduce using rule 39
	number         reduce using rule 39
	string         reduce using rule 39
	boolean        reduce using rule 39
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           shift, and enter state 53
	'&&'           shift, and enter state 54
	in             reduce using rule 39
	with           reduce using rule 39
	if             reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	return         reduce using rule 39
	import         reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	'['            reduce using rule 39
	']'            reduce using rule 39
	'{'            reduce using rule 39
	'}'            reduce using rule 39
	','            reduce using rule 39
	'\\'           reduce using rule 39
	%eof           reduce using rule 39


State 62

	params -> atom params .                             (rule 20)

	'!'            reduce using rule 20


State 63

	fnApplication -> atom params '!' .                  (rule 21)

	id             reduce using rule 21
	number         reduce using rule 21
	string         reduce using rule 21
	boolean        reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	'<'            reduce using rule 21
	'<='           reduce using rule 21
	'>'            reduce using rule 21
	'>='           reduce using rule 21
	'||'           reduce using rule 21
	'&&'           reduce using rule 21
	in             reduce using rule 21
	with           reduce using rule 21
	if             reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	return         reduce using rule 21
	import         reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	'['            reduce using rule 21
	']'            reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	','            reduce using rule 21
	'\\'           reduce using rule 21
	%eof           reduce using rule 21


State 64

	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)
	expr -> expr '&&' expr .                            (rule 51)

	id             reduce using rule 51
	number         reduce using rule 51
	string         reduce using rule 51
	boolean        reduce using rule 51
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           reduce using rule 51
	'&&'           reduce using rule 51
	in             reduce using rule 51
	with           reduce using rule 51
	if             reduce using rule 51
	then           reduce using rule 51
	else           reduce using rule 51
	return         reduce using rule 51
	import         reduce using rule 51
	'('            reduce using rule 51
	')'            reduce using rule 51
	'['            reduce using rule 51
	']'            reduce using rule 51
	'{'            reduce using rule 51
	'}'            reduce using rule 51
	','            reduce using rule 51
	'\\'           reduce using rule 51
	%eof           reduce using rule 51


State 65

	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr '||' expr .                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	id             reduce using rule 50
	number         reduce using rule 50
	string         reduce using rule 50
	boolean        reduce using rule 50
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           reduce using rule 50
	'&&'           shift, and enter state 54
	in             reduce using rule 50
	with           reduce using rule 50
	if             reduce using rule 50
	then           reduce using rule 50
	else           reduce using rule 50
	return         reduce using rule 50
	import         reduce using rule 50
	'('            reduce using rule 50
	')'            reduce using rule 50
	'['            reduce using rule 50
	']'            reduce using rule 50
	'{'            reduce using rule 50
	'}'            reduce using rule 50
	','            reduce using rule 50
	'\\'           reduce using rule 50
	%eof           reduce using rule 50


State 66

	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr '>=' expr .                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	id             reduce using rule 49
	number         reduce using rule 49
	string         reduce using rule 49
	boolean        reduce using rule 49
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'||'           reduce using rule 49
	'&&'           reduce using rule 49
	in             reduce using rule 49
	with           reduce using rule 49
	if             reduce using rule 49
	then           reduce using rule 49
	else           reduce using rule 49
	return         reduce using rule 49
	import         reduce using rule 49
	'('            reduce using rule 49
	')'            reduce using rule 49
	'['            reduce using rule 49
	']'            reduce using rule 49
	'{'            reduce using rule 49
	'}'            reduce using rule 49
	','            reduce using rule 49
	'\\'           reduce using rule 49
	%eof           reduce using rule 49


State 67

	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr '>' expr .                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	id             reduce using rule 48
	number         reduce using rule 48
	string         reduce using rule 48
	boolean        reduce using rule 48
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'||'           reduce using rule 48
	'&&'           reduce using rule 48
	in             reduce using rule 48
	with           reduce using rule 48
	if             reduce using rule 48
	then           reduce using rule 48
	else           reduce using rule 48
	return         reduce using rule 48
	import         reduce using rule 48
	'('            reduce using rule 48
	')'            reduce using rule 48
	'['            reduce using rule 48
	']'            reduce using rule 48
	'{'            reduce using rule 48
	'}'            reduce using rule 48
	','            reduce using rule 48
	'\\'           reduce using rule 48
	%eof           reduce using rule 48


State 68

	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr '<=' expr .                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	id             reduce using rule 47
	number         reduce using rule 47
	string         reduce using rule 47
	boolean        reduce using rule 47
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'||'           reduce using rule 47
	'&&'           reduce using rule 47
	in             reduce using rule 47
	with           reduce using rule 47
	if             reduce using rule 47
	then           reduce using rule 47
	else           reduce using rule 47
	return         reduce using rule 47
	import         reduce using rule 47
	'('            reduce using rule 47
	')'            reduce using rule 47
	'['            reduce using rule 47
	']'            reduce using rule 47
	'{'            reduce using rule 47
	'}'            reduce using rule 47
	','            reduce using rule 47
	'\\'           reduce using rule 47
	%eof           reduce using rule 47


State 69

	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr '<' expr .                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	id             reduce using rule 46
	number         reduce using rule 46
	string         reduce using rule 46
	boolean        reduce using rule 46
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            fail
	'<='           fail
	'>'            fail
	'>='           fail
	'||'           reduce using rule 46
	'&&'           reduce using rule 46
	in             reduce using rule 46
	with           reduce using rule 46
	if             reduce using rule 46
	then           reduce using rule 46
	else           reduce using rule 46
	return         reduce using rule 46
	import         reduce using rule 46
	'('            reduce using rule 46
	')'            reduce using rule 46
	'['            reduce using rule 46
	']'            reduce using rule 46
	'{'            reduce using rule 46
	'}'            reduce using rule 46
	','            reduce using rule 46
	'\\'           reduce using rule 46
	%eof           reduce using rule 46


State 70

	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr '/' expr .                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	id             reduce using rule 45
	number         reduce using rule 45
	string         reduce using rule 45
	boolean        reduce using rule 45
	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'*'            reduce using rule 45
	'/'            reduce using rule 45
	'<'            reduce using rule 45
	'<='           reduce using rule 45
	'>'            reduce using rule 45
	'>='           reduce using rule 45
	'||'           reduce using rule 45
	'&&'           reduce using rule 45
	in             reduce using rule 45
	with           reduce using rule 45
	if             reduce using rule 45
	then           reduce using rule 45
	else           reduce using rule 45
	return         reduce using rule 45
	import         reduce using rule 45
	'('            reduce using rule 45
	')'            reduce using rule 45
	'['            reduce using rule 45
	']'            reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	','            reduce using rule 45
	'\\'           reduce using rule 45
	%eof           reduce using rule 45


State 71

	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr '*' expr .                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	id             reduce using rule 44
	number         reduce using rule 44
	string         reduce using rule 44
	boolean        reduce using rule 44
	'+'            reduce using rule 44
	'-'            reduce using rule 44
	'*'            reduce using rule 44
	'/'            reduce using rule 44
	'<'            reduce using rule 44
	'<='           reduce using rule 44
	'>'            reduce using rule 44
	'>='           reduce using rule 44
	'||'           reduce using rule 44
	'&&'           reduce using rule 44
	in             reduce using rule 44
	with           reduce using rule 44
	if             reduce using rule 44
	then           reduce using rule 44
	else           reduce using rule 44
	return         reduce using rule 44
	import         reduce using rule 44
	'('            reduce using rule 44
	')'            reduce using rule 44
	'['            reduce using rule 44
	']'            reduce using rule 44
	'{'            reduce using rule 44
	'}'            reduce using rule 44
	','            reduce using rule 44
	'\\'           reduce using rule 44
	%eof           reduce using rule 44


State 72

	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr '-' expr .                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	id             reduce using rule 43
	number         reduce using rule 43
	string         reduce using rule 43
	boolean        reduce using rule 43
	'+'            reduce using rule 43
	'-'            reduce using rule 43
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            reduce using rule 43
	'<='           reduce using rule 43
	'>'            reduce using rule 43
	'>='           reduce using rule 43
	'||'           reduce using rule 43
	'&&'           reduce using rule 43
	in             reduce using rule 43
	with           reduce using rule 43
	if             reduce using rule 43
	then           reduce using rule 43
	else           reduce using rule 43
	return         reduce using rule 43
	import         reduce using rule 43
	'('            reduce using rule 43
	')'            reduce using rule 43
	'['            reduce using rule 43
	']'            reduce using rule 43
	'{'            reduce using rule 43
	'}'            reduce using rule 43
	','            reduce using rule 43
	'\\'           reduce using rule 43
	%eof           reduce using rule 43


State 73

	expr -> expr . '+' expr                             (rule 42)
	expr -> expr '+' expr .                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	id             reduce using rule 42
	number         reduce using rule 42
	string         reduce using rule 42
	boolean        reduce using rule 42
	'+'            reduce using rule 42
	'-'            reduce using rule 42
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            reduce using rule 42
	'<='           reduce using rule 42
	'>'            reduce using rule 42
	'>='           reduce using rule 42
	'||'           reduce using rule 42
	'&&'           reduce using rule 42
	in             reduce using rule 42
	with           reduce using rule 42
	if             reduce using rule 42
	then           reduce using rule 42
	else           reduce using rule 42
	return         reduce using rule 42
	import         reduce using rule 42
	'('            reduce using rule 42
	')'            reduce using rule 42
	'['            reduce using rule 42
	']'            reduce using rule 42
	'{'            reduce using rule 42
	'}'            reduce using rule 42
	','            reduce using rule 42
	'\\'           reduce using rule 42
	%eof           reduce using rule 42


State 74

	controlFlow -> if expr then . expr else expr        (rule 22)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 115

State 75

	tuple -> '(' expr tupleElems . ')'                  (rule 15)

	')'            shift, and enter state 114


State 76

	atom -> '(' expr ')' .                              (rule 35)

	id             reduce using rule 35
	number         reduce using rule 35
	string         reduce using rule 35
	boolean        reduce using rule 35
	'!'            reduce using rule 35
	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	'<'            reduce using rule 35
	'<='           reduce using rule 35
	'>'            reduce using rule 35
	'>='           reduce using rule 35
	'||'           reduce using rule 35
	'&&'           reduce using rule 35
	in             reduce using rule 35
	with           reduce using rule 35
	if             reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	return         reduce using rule 35
	import         reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	'['            reduce using rule 35
	']'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	','            reduce using rule 35
	'\\'           reduce using rule 35
	%eof           reduce using rule 35


State 77

	tupleElems -> ',' . expr                            (rule 13)
	tupleElems -> ',' . expr tupleElems                 (rule 14)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 113

State 78

	listElements -> expr ',' . listElements             (rule 11)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	']'            reduce using rule 9
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	listElements   goto state 112
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 41

State 79

	list -> '[' listElements ']' .                      (rule 12)

	id             reduce using rule 12
	number         reduce using rule 12
	string         reduce using rule 12
	boolean        reduce using rule 12
	'!'            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	'<'            reduce using rule 12
	'<='           reduce using rule 12
	'>'            reduce using rule 12
	'>='           reduce using rule 12
	'||'           reduce using rule 12
	'&&'           reduce using rule 12
	in             reduce using rule 12
	with           reduce using rule 12
	if             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	return         reduce using rule 12
	import         reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'['            reduce using rule 12
	']'            reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	','            reduce using rule 12
	'\\'           reduce using rule 12
	%eof           reduce using rule 12


State 80

	block -> return expr .                              (rule 24)
	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           shift, and enter state 53
	'&&'           shift, and enter state 54
	'}'            reduce using rule 24


State 81

	block -> expr block .                               (rule 25)

	'}'            reduce using rule 25


State 82

	atom -> '{' block '}' .                             (rule 34)

	id             reduce using rule 34
	number         reduce using rule 34
	string         reduce using rule 34
	boolean        reduce using rule 34
	'!'            reduce using rule 34
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	'<'            reduce using rule 34
	'<='           reduce using rule 34
	'>'            reduce using rule 34
	'>='           reduce using rule 34
	'||'           reduce using rule 34
	'&&'           reduce using rule 34
	in             reduce using rule 34
	with           reduce using rule 34
	if             reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	return         reduce using rule 34
	import         reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	'['            reduce using rule 34
	']'            reduce using rule 34
	'{'            reduce using rule 34
	'}'            reduce using rule 34
	','            reduce using rule 34
	'\\'           reduce using rule 34
	%eof           reduce using rule 34


State 83

	record -> '{' pairs '}' .                           (rule 8)

	id             reduce using rule 8
	number         reduce using rule 8
	string         reduce using rule 8
	boolean        reduce using rule 8
	'!'            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	'<'            reduce using rule 8
	'<='           reduce using rule 8
	'>'            reduce using rule 8
	'>='           reduce using rule 8
	'||'           reduce using rule 8
	'&&'           reduce using rule 8
	in             reduce using rule 8
	with           reduce using rule 8
	if             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	return         reduce using rule 8
	import         reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	'['            reduce using rule 8
	']'            reduce using rule 8
	'{'            reduce using rule 8
	'}'            reduce using rule 8
	','            reduce using rule 8
	'\\'           reduce using rule 8
	%eof           reduce using rule 8


State 84

	pairs -> identifier ':' . expr ',' pairs            (rule 6)
	pairs -> identifier ':' . expr                      (rule 7)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 111

State 85

	lambda -> '\\' args '->' . expr                     (rule 18)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 110

State 86

	args -> identifier args .                           (rule 17)

	'->'           reduce using rule 17


State 87

	imports -> importMod . imports                      (rule 76)

	import         shift, and enter state 89
	%eof           reduce using rule 75

	importMod      goto state 87
	imports        goto state 109

State 88

	script -> moduleDef declarations imports .          (rule 77)

	%eof           reduce using rule 77


State 89

	importMod -> import . path                          (rule 74)

	id             shift, and enter state 3

	identifier     goto state 27
	path           goto state 108

State 90

	declarations -> dec declarations .                  (rule 72)

	in             reduce using rule 72
	import         reduce using rule 72
	%eof           reduce using rule 72


State 91

	dec -> typeAnnotation identifier . '=' expr         (rule 70)

	'='            shift, and enter state 107


State 92

	typeAnnotation -> identifier ':' . typeExpr         (rule 69)

	id             shift, and enter state 3
	number         shift, and enter state 101
	string         shift, and enter state 102
	boolean        shift, and enter state 103
	if             shift, and enter state 104
	'('            shift, and enter state 105
	'{'            shift, and enter state 106

	identifier     goto state 96
	trecord        goto state 97
	ttuple         goto state 98
	type           goto state 99
	typeExpr       goto state 100

State 93

	moduleDef -> module path where .                    (rule 73)

	id             reduce using rule 73
	import         reduce using rule 73
	%eof           reduce using rule 73


State 94

	path -> identifier '.' . path                       (rule 4)

	id             shift, and enter state 3

	identifier     goto state 27
	path           goto state 95

State 95

	path -> identifier '.' path .                       (rule 4)

	where          reduce using rule 4
	import         reduce using rule 4
	%eof           reduce using rule 4


State 96

	type -> identifier .                                (rule 64)

	id             reduce using rule 64
	then           reduce using rule 64
	else           reduce using rule 64
	')'            reduce using rule 64
	'}'            reduce using rule 64
	','            reduce using rule 64


State 97

	type -> trecord .                                   (rule 63)

	id             reduce using rule 63
	then           reduce using rule 63
	else           reduce using rule 63
	')'            reduce using rule 63
	'}'            reduce using rule 63
	','            reduce using rule 63


State 98

	type -> ttuple .                                    (rule 62)

	id             reduce using rule 62
	then           reduce using rule 62
	else           reduce using rule 62
	')'            reduce using rule 62
	'}'            reduce using rule 62
	','            reduce using rule 62


State 99

	typeExpr -> type .                                  (rule 65)

	id             reduce using rule 65
	then           reduce using rule 65
	else           reduce using rule 65
	')'            reduce using rule 65
	'}'            reduce using rule 65
	','            reduce using rule 65


State 100

	typeAnnotation -> identifier ':' typeExpr .         (rule 69)

	id             reduce using rule 69


State 101

	type -> number .                                    (rule 59)

	id             reduce using rule 59
	then           reduce using rule 59
	else           reduce using rule 59
	')'            reduce using rule 59
	'}'            reduce using rule 59
	','            reduce using rule 59


State 102

	type -> string .                                    (rule 60)

	id             reduce using rule 60
	then           reduce using rule 60
	else           reduce using rule 60
	')'            reduce using rule 60
	'}'            reduce using rule 60
	','            reduce using rule 60


State 103

	type -> boolean .                                   (rule 61)

	id             reduce using rule 61
	then           reduce using rule 61
	else           reduce using rule 61
	')'            reduce using rule 61
	'}'            reduce using rule 61
	','            reduce using rule 61


State 104

	typeExpr -> if . typeExpr then typeExpr else typeExpr    (rule 66)

	id             shift, and enter state 3
	number         shift, and enter state 101
	string         shift, and enter state 102
	boolean        shift, and enter state 103
	if             shift, and enter state 104
	'('            shift, and enter state 105
	'{'            shift, and enter state 106

	identifier     goto state 96
	trecord        goto state 97
	ttuple         goto state 98
	type           goto state 99
	typeExpr       goto state 123

State 105

	ttuple -> '(' . typeExpr ttupleElems ')'            (rule 58)
	typeExpr -> '(' . typeExpr ')'                      (rule 67)

	id             shift, and enter state 3
	number         shift, and enter state 101
	string         shift, and enter state 102
	boolean        shift, and enter state 103
	if             shift, and enter state 104
	'('            shift, and enter state 105
	'{'            shift, and enter state 106

	identifier     goto state 96
	trecord        goto state 97
	ttuple         goto state 98
	type           goto state 99
	typeExpr       goto state 122

State 106

	trecord -> '{' . tpairs '}'                         (rule 55)

	id             shift, and enter state 3
	'}'            reduce using rule 52

	identifier     goto state 120
	tpairs         goto state 121

State 107

	dec -> typeAnnotation identifier '=' . expr         (rule 70)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 119

State 108

	importMod -> import path .                          (rule 74)

	import         reduce using rule 74
	%eof           reduce using rule 74


State 109

	imports -> importMod imports .                      (rule 76)

	%eof           reduce using rule 76


State 110

	lambda -> '\\' args '->' expr .                     (rule 18)
	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	id             reduce using rule 18
	number         reduce using rule 18
	string         reduce using rule 18
	boolean        reduce using rule 18
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           shift, and enter state 53
	'&&'           shift, and enter state 54
	in             reduce using rule 18
	with           reduce using rule 18
	if             reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	return         reduce using rule 18
	import         reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'['            reduce using rule 18
	']'            reduce using rule 18
	'{'            reduce using rule 18
	'}'            reduce using rule 18
	','            reduce using rule 18
	'\\'           reduce using rule 18
	%eof           reduce using rule 18


State 111

	pairs -> identifier ':' expr . ',' pairs            (rule 6)
	pairs -> identifier ':' expr .                      (rule 7)
	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           shift, and enter state 53
	'&&'           shift, and enter state 54
	'}'            reduce using rule 7
	','            shift, and enter state 118


State 112

	listElements -> expr ',' listElements .             (rule 11)

	']'            reduce using rule 11


State 113

	tupleElems -> ',' expr .                            (rule 13)
	tupleElems -> ',' expr . tupleElems                 (rule 14)
	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           shift, and enter state 53
	'&&'           shift, and enter state 54
	')'            reduce using rule 13
	','            shift, and enter state 77

	tupleElems     goto state 117

State 114

	tuple -> '(' expr tupleElems ')' .                  (rule 15)

	id             reduce using rule 15
	number         reduce using rule 15
	string         reduce using rule 15
	boolean        reduce using rule 15
	'!'            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	'<'            reduce using rule 15
	'<='           reduce using rule 15
	'>'            reduce using rule 15
	'>='           reduce using rule 15
	'||'           reduce using rule 15
	'&&'           reduce using rule 15
	in             reduce using rule 15
	with           reduce using rule 15
	if             reduce using rule 15
	then           reduce using rule 15
	else           reduce using rule 15
	return         reduce using rule 15
	import         reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'['            reduce using rule 15
	']'            reduce using rule 15
	'{'            reduce using rule 15
	'}'            reduce using rule 15
	','            reduce using rule 15
	'\\'           reduce using rule 15
	%eof           reduce using rule 15


State 115

	controlFlow -> if expr then expr . else expr        (rule 22)
	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           shift, and enter state 53
	'&&'           shift, and enter state 54
	else           shift, and enter state 116


State 116

	controlFlow -> if expr then expr else . expr        (rule 22)

	id             shift, and enter state 3
	number         shift, and enter state 15
	string         shift, and enter state 16
	boolean        shift, and enter state 17
	with           shift, and enter state 18
	if             shift, and enter state 19
	'('            shift, and enter state 20
	'['            shift, and enter state 21
	'{'            shift, and enter state 22
	'\\'           shift, and enter state 23

	identifier     goto state 4
	record         goto state 5
	list           goto state 6
	tuple          goto state 7
	lambda         goto state 8
	fnApplication  goto state 9
	controlFlow    goto state 10
	clause         goto state 11
	term           goto state 12
	atom           goto state 13
	expr           goto state 132

State 117

	tupleElems -> ',' expr tupleElems .                 (rule 14)

	')'            reduce using rule 14


State 118

	pairs -> identifier ':' expr ',' . pairs            (rule 6)

	id             shift, and enter state 3
	'}'            reduce using rule 5

	identifier     goto state 130
	pairs          goto state 131

State 119

	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)
	dec -> typeAnnotation identifier '=' expr .         (rule 70)

	id             reduce using rule 70
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           shift, and enter state 53
	'&&'           shift, and enter state 54
	in             reduce using rule 70
	import         reduce using rule 70
	%eof           reduce using rule 70


State 120

	tpairs -> identifier . ':' typeExpr ',' tpairs      (rule 53)
	tpairs -> identifier . ':' typeExpr                 (rule 54)

	':'            shift, and enter state 129


State 121

	trecord -> '{' tpairs . '}'                         (rule 55)

	'}'            shift, and enter state 128


State 122

	ttuple -> '(' typeExpr . ttupleElems ')'            (rule 58)
	typeExpr -> '(' typeExpr . ')'                      (rule 67)

	')'            shift, and enter state 126
	','            shift, and enter state 127

	ttupleElems    goto state 125

State 123

	typeExpr -> if typeExpr . then typeExpr else typeExpr    (rule 66)

	then           shift, and enter state 124


State 124

	typeExpr -> if typeExpr then . typeExpr else typeExpr    (rule 66)

	id             shift, and enter state 3
	number         shift, and enter state 101
	string         shift, and enter state 102
	boolean        shift, and enter state 103
	if             shift, and enter state 104
	'('            shift, and enter state 105
	'{'            shift, and enter state 106

	identifier     goto state 96
	trecord        goto state 97
	ttuple         goto state 98
	type           goto state 99
	typeExpr       goto state 136

State 125

	ttuple -> '(' typeExpr ttupleElems . ')'            (rule 58)

	')'            shift, and enter state 135


State 126

	typeExpr -> '(' typeExpr ')' .                      (rule 67)

	id             reduce using rule 67
	then           reduce using rule 67
	else           reduce using rule 67
	')'            reduce using rule 67
	'}'            reduce using rule 67
	','            reduce using rule 67


State 127

	ttupleElems -> ',' . typeExpr                       (rule 56)
	ttupleElems -> ',' . typeExpr ttupleElems           (rule 57)

	id             shift, and enter state 3
	number         shift, and enter state 101
	string         shift, and enter state 102
	boolean        shift, and enter state 103
	if             shift, and enter state 104
	'('            shift, and enter state 105
	'{'            shift, and enter state 106

	identifier     goto state 96
	trecord        goto state 97
	ttuple         goto state 98
	type           goto state 99
	typeExpr       goto state 134

State 128

	trecord -> '{' tpairs '}' .                         (rule 55)

	id             reduce using rule 55
	then           reduce using rule 55
	else           reduce using rule 55
	')'            reduce using rule 55
	'}'            reduce using rule 55
	','            reduce using rule 55


State 129

	tpairs -> identifier ':' . typeExpr ',' tpairs      (rule 53)
	tpairs -> identifier ':' . typeExpr                 (rule 54)

	id             shift, and enter state 3
	number         shift, and enter state 101
	string         shift, and enter state 102
	boolean        shift, and enter state 103
	if             shift, and enter state 104
	'('            shift, and enter state 105
	'{'            shift, and enter state 106

	identifier     goto state 96
	trecord        goto state 97
	ttuple         goto state 98
	type           goto state 99
	typeExpr       goto state 133

State 130

	pairs -> identifier . ':' expr ',' pairs            (rule 6)
	pairs -> identifier . ':' expr                      (rule 7)

	':'            shift, and enter state 84


State 131

	pairs -> identifier ':' expr ',' pairs .            (rule 6)

	'}'            reduce using rule 6


State 132

	controlFlow -> if expr then expr else expr .        (rule 22)
	expr -> expr . '+' expr                             (rule 42)
	expr -> expr . '-' expr                             (rule 43)
	expr -> expr . '*' expr                             (rule 44)
	expr -> expr . '/' expr                             (rule 45)
	expr -> expr . '<' expr                             (rule 46)
	expr -> expr . '<=' expr                            (rule 47)
	expr -> expr . '>' expr                             (rule 48)
	expr -> expr . '>=' expr                            (rule 49)
	expr -> expr . '||' expr                            (rule 50)
	expr -> expr . '&&' expr                            (rule 51)

	id             reduce using rule 22
	number         reduce using rule 22
	string         reduce using rule 22
	boolean        reduce using rule 22
	'+'            shift, and enter state 45
	'-'            shift, and enter state 46
	'*'            shift, and enter state 47
	'/'            shift, and enter state 48
	'<'            shift, and enter state 49
	'<='           shift, and enter state 50
	'>'            shift, and enter state 51
	'>='           shift, and enter state 52
	'||'           shift, and enter state 53
	'&&'           shift, and enter state 54
	in             reduce using rule 22
	with           reduce using rule 22
	if             reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	return         reduce using rule 22
	import         reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'['            reduce using rule 22
	']'            reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	','            reduce using rule 22
	'\\'           reduce using rule 22
	%eof           reduce using rule 22


State 133

	tpairs -> identifier ':' typeExpr . ',' tpairs      (rule 53)
	tpairs -> identifier ':' typeExpr .                 (rule 54)

	'}'            reduce using rule 54
	','            shift, and enter state 139


State 134

	ttupleElems -> ',' typeExpr .                       (rule 56)
	ttupleElems -> ',' typeExpr . ttupleElems           (rule 57)

	')'            reduce using rule 56
	','            shift, and enter state 127

	ttupleElems    goto state 138

State 135

	ttuple -> '(' typeExpr ttupleElems ')' .            (rule 58)

	id             reduce using rule 58
	then           reduce using rule 58
	else           reduce using rule 58
	')'            reduce using rule 58
	'}'            reduce using rule 58
	','            reduce using rule 58


State 136

	typeExpr -> if typeExpr then typeExpr . else typeExpr    (rule 66)

	else           shift, and enter state 137


State 137

	typeExpr -> if typeExpr then typeExpr else . typeExpr    (rule 66)

	id             shift, and enter state 3
	number         shift, and enter state 101
	string         shift, and enter state 102
	boolean        shift, and enter state 103
	if             shift, and enter state 104
	'('            shift, and enter state 105
	'{'            shift, and enter state 106

	identifier     goto state 96
	trecord        goto state 97
	ttuple         goto state 98
	type           goto state 99
	typeExpr       goto state 141

State 138

	ttupleElems -> ',' typeExpr ttupleElems .           (rule 57)

	')'            reduce using rule 57


State 139

	tpairs -> identifier ':' typeExpr ',' . tpairs      (rule 53)

	id             shift, and enter state 3
	'}'            reduce using rule 52

	identifier     goto state 120
	tpairs         goto state 140

State 140

	tpairs -> identifier ':' typeExpr ',' tpairs .      (rule 53)

	'}'            reduce using rule 53


State 141

	typeExpr -> if typeExpr then typeExpr else typeExpr .    (rule 66)

	id             reduce using rule 66
	then           reduce using rule 66
	else           reduce using rule 66
	')'            reduce using rule 66
	'}'            reduce using rule 66
	','            reduce using rule 66


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 78
Number of terminals: 44
Number of non-terminals: 33
Number of states: 142
