-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from src/Saga/Parser/Parser.y
-----------------------------------------------------------------------------

state 10 contains 1 shift/reduce conflicts.

rule 6 is unused
rule 7 is unused
rule 8 is unused
rule 23 is unused
rule 24 is unused
rule 29 is unused
rule 30 is unused
rule 31 is unused

terminal '!' is unused
terminal op is unused
terminal let is unused
terminal match is unused
terminal return is unused
terminal '|' is unused
terminal newline is unused
terminal eof is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseSagaScript -> script                   (0)
	%start_parseSagaExpr -> expr                       (1)
	identifier -> id                                   (2)
	path -> identifier                                 (3)
	path -> identifier '.' path                        (4)
	definition -> identifier '=' expr                  (5)
	type -> expr                                       (6)
	type -> expr '->' type                             (7)
	typeAnnotation -> identifier ':' type              (8)
	pairs ->                                           (9)
	pairs -> identifier ':' expr ',' pairs             (10)
	pairs -> identifier ':' expr                       (11)
	record -> '{' pairs '}'                            (12)
	listElements ->                                    (13)
	listElements -> expr                               (14)
	listElements -> expr ',' listElements              (15)
	list -> '[' listElements ']'                       (16)
	tupleElems -> ',' expr                             (17)
	tupleElems -> ',' expr tupleElems                  (18)
	tuple -> '(' expr tupleElems ')'                   (19)
	args ->                                            (20)
	args -> identifier args                            (21)
	lambda -> '\\' args '->' expr                      (22)
	params -> atom                                     (23)
	params -> expr params                              (24)
	fnApplication -> fnApplication atom                (25)
	fnApplication -> atom                              (26)
	controlFlow -> if expr then expr else expr         (27)
	clause -> with declarations in expr                (28)
	block -> expr                                      (29)
	block -> return expr                               (30)
	block -> expr block                                (31)
	term -> number                                     (32)
	term -> string                                     (33)
	term -> boolean                                    (34)
	term -> tuple                                      (35)
	term -> list                                       (36)
	term -> record                                     (37)
	atom -> identifier                                 (38)
	atom -> term                                       (39)
	atom -> '(' expr ')'                               (40)
	expr -> definition                                 (41)
	expr -> fnApplication                              (42)
	expr -> controlFlow                                (43)
	expr -> lambda                                     (44)
	expr -> clause                                     (45)
	declarations ->                                    (46)
	declarations -> definition declarations            (47)
	moduleDef -> module path where                     (48)
	importMod -> import path                           (49)
	imports ->                                         (50)
	imports -> importMod imports                       (51)
	script -> moduleDef declarations imports           (52)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	id             { L.RangedToken (T.Id _) _ }
	number         { L.RangedToken (T.Number _) _ }
	string         { L.RangedToken (T.String _) _ }
	boolean        { L.RangedToken (T.Boolean _) _ }
	'!'            { L.RangedToken (T.Operator "!") _ }
	op             { L.RangedToken (T.Operator _) _ }
	let            { L.RangedToken T.Let _ }
	in             { L.RangedToken T.In _ }
	where          { L.RangedToken T.Where _ }
	with           { L.RangedToken T.With _ }
	if             { L.RangedToken T.If _ }
	then           { L.RangedToken T.Then _ }
	else           { L.RangedToken T.Else _ }
	match          { L.RangedToken T.Match _ }
	return         { L.RangedToken T.Return _ }
	module         { L.RangedToken T.Module _ }
	import         { L.RangedToken T.Import _ }
	'('            { L.RangedToken T.LParen _ }
	')'            { L.RangedToken T.RParen _ }
	'['            { L.RangedToken T.LBrack _ }
	']'            { L.RangedToken T.RBrack _ }
	'{'            { L.RangedToken T.LCurly _ }
	'}'            { L.RangedToken T.RCurly _ }
	':'            { L.RangedToken T.Colon _ }
	','            { L.RangedToken T.Comma _ }
	'->'           { L.RangedToken T.Arrow _ }
	'='            { L.RangedToken T.Equals _ }
	'|'            { L.RangedToken T.Pipe _ }
	'.'            { L.RangedToken T.Dot _ }
	'\\'           { L.RangedToken T.BackSlash _ }
	newline        { L.RangedToken T.Newline _ }
	eof            { L.RangedToken T.EOF _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseSagaScript rule  0
	%start_parseSagaExpr rule  1
	identifier      rule  2
	path            rules 3, 4
	definition      rule  5
	type            rules 6, 7
	typeAnnotation  rule  8
	pairs           rules 9, 10, 11
	record          rule  12
	listElements    rules 13, 14, 15
	list            rule  16
	tupleElems      rules 17, 18
	tuple           rule  19
	args            rules 20, 21
	lambda          rule  22
	params          rules 23, 24
	fnApplication   rules 25, 26
	controlFlow     rule  27
	clause          rule  28
	block           rules 29, 30, 31
	term            rules 32, 33, 34, 35, 36, 37
	atom            rules 38, 39, 40
	expr            rules 41, 42, 43, 44, 45
	declarations    rules 46, 47
	moduleDef       rule  48
	importMod       rule  49
	imports         rules 50, 51
	script          rule  52

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseSagaScript -> . script                  (rule 0)

	module         shift, and enter state 27

	moduleDef      goto state 25
	script         goto state 26

State 1

	%start_parseSagaExpr -> . expr                      (rule 1)

	id             shift, and enter state 3
	number         shift, and enter state 16
	string         shift, and enter state 17
	boolean        shift, and enter state 18
	with           shift, and enter state 19
	if             shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 4
	definition     goto state 5
	record         goto state 6
	list           goto state 7
	tuple          goto state 8
	lambda         goto state 9
	fnApplication  goto state 10
	controlFlow    goto state 11
	clause         goto state 12
	term           goto state 13
	atom           goto state 14
	expr           goto state 15

State 2

	identifier -> . id                                  (rule 2)

	id             shift, and enter state 3


State 3

	identifier -> id .                                  (rule 2)

	id             reduce using rule 2
	number         reduce using rule 2
	string         reduce using rule 2
	boolean        reduce using rule 2
	in             reduce using rule 2
	where          reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	import         reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	'['            reduce using rule 2
	']'            reduce using rule 2
	'{'            reduce using rule 2
	'}'            reduce using rule 2
	':'            reduce using rule 2
	','            reduce using rule 2
	'->'           reduce using rule 2
	'='            reduce using rule 2
	'.'            reduce using rule 2
	%eof           reduce using rule 2


State 4

	definition -> identifier . '=' expr                 (rule 5)
	atom -> identifier .                                (rule 38)

	id             reduce using rule 38
	number         reduce using rule 38
	string         reduce using rule 38
	boolean        reduce using rule 38
	in             reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	import         reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	'['            reduce using rule 38
	']'            reduce using rule 38
	'{'            reduce using rule 38
	'}'            reduce using rule 38
	','            reduce using rule 38
	'='            shift, and enter state 44
	%eof           reduce using rule 38


State 5

	expr -> definition .                                (rule 41)

	id             reduce using rule 41
	in             reduce using rule 41
	then           reduce using rule 41
	else           reduce using rule 41
	import         reduce using rule 41
	')'            reduce using rule 41
	']'            reduce using rule 41
	'}'            reduce using rule 41
	','            reduce using rule 41
	%eof           reduce using rule 41


State 6

	term -> record .                                    (rule 37)

	id             reduce using rule 37
	number         reduce using rule 37
	string         reduce using rule 37
	boolean        reduce using rule 37
	in             reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	import         reduce using rule 37
	'('            reduce using rule 37
	')'            reduce using rule 37
	'['            reduce using rule 37
	']'            reduce using rule 37
	'{'            reduce using rule 37
	'}'            reduce using rule 37
	','            reduce using rule 37
	%eof           reduce using rule 37


State 7

	term -> list .                                      (rule 36)

	id             reduce using rule 36
	number         reduce using rule 36
	string         reduce using rule 36
	boolean        reduce using rule 36
	in             reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	import         reduce using rule 36
	'('            reduce using rule 36
	')'            reduce using rule 36
	'['            reduce using rule 36
	']'            reduce using rule 36
	'{'            reduce using rule 36
	'}'            reduce using rule 36
	','            reduce using rule 36
	%eof           reduce using rule 36


State 8

	term -> tuple .                                     (rule 35)

	id             reduce using rule 35
	number         reduce using rule 35
	string         reduce using rule 35
	boolean        reduce using rule 35
	in             reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	import         reduce using rule 35
	'('            reduce using rule 35
	')'            reduce using rule 35
	'['            reduce using rule 35
	']'            reduce using rule 35
	'{'            reduce using rule 35
	'}'            reduce using rule 35
	','            reduce using rule 35
	%eof           reduce using rule 35


State 9

	expr -> lambda .                                    (rule 44)

	id             reduce using rule 44
	in             reduce using rule 44
	then           reduce using rule 44
	else           reduce using rule 44
	import         reduce using rule 44
	')'            reduce using rule 44
	']'            reduce using rule 44
	'}'            reduce using rule 44
	','            reduce using rule 44
	%eof           reduce using rule 44


State 10

	fnApplication -> fnApplication . atom               (rule 25)
	expr -> fnApplication .                             (rule 42)

	id             shift, and enter state 3
			(reduce using rule 42)

	number         shift, and enter state 16
	string         shift, and enter state 17
	boolean        shift, and enter state 18
	in             reduce using rule 42
	then           reduce using rule 42
	else           reduce using rule 42
	import         reduce using rule 42
	'('            shift, and enter state 21
	')'            reduce using rule 42
	'['            shift, and enter state 22
	']'            reduce using rule 42
	'{'            shift, and enter state 23
	'}'            reduce using rule 42
	','            reduce using rule 42
	%eof           reduce using rule 42

	identifier     goto state 42
	record         goto state 6
	list           goto state 7
	tuple          goto state 8
	term           goto state 13
	atom           goto state 43

State 11

	expr -> controlFlow .                               (rule 43)

	id             reduce using rule 43
	in             reduce using rule 43
	then           reduce using rule 43
	else           reduce using rule 43
	import         reduce using rule 43
	')'            reduce using rule 43
	']'            reduce using rule 43
	'}'            reduce using rule 43
	','            reduce using rule 43
	%eof           reduce using rule 43


State 12

	expr -> clause .                                    (rule 45)

	id             reduce using rule 45
	in             reduce using rule 45
	then           reduce using rule 45
	else           reduce using rule 45
	import         reduce using rule 45
	')'            reduce using rule 45
	']'            reduce using rule 45
	'}'            reduce using rule 45
	','            reduce using rule 45
	%eof           reduce using rule 45


State 13

	atom -> term .                                      (rule 39)

	id             reduce using rule 39
	number         reduce using rule 39
	string         reduce using rule 39
	boolean        reduce using rule 39
	in             reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	import         reduce using rule 39
	'('            reduce using rule 39
	')'            reduce using rule 39
	'['            reduce using rule 39
	']'            reduce using rule 39
	'{'            reduce using rule 39
	'}'            reduce using rule 39
	','            reduce using rule 39
	%eof           reduce using rule 39


State 14

	fnApplication -> atom .                             (rule 26)

	id             reduce using rule 26
	number         reduce using rule 26
	string         reduce using rule 26
	boolean        reduce using rule 26
	in             reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	import         reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'['            reduce using rule 26
	']'            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	','            reduce using rule 26
	%eof           reduce using rule 26


State 15

	%start_parseSagaExpr -> expr .                      (rule 1)

	%eof           accept


State 16

	term -> number .                                    (rule 32)

	id             reduce using rule 32
	number         reduce using rule 32
	string         reduce using rule 32
	boolean        reduce using rule 32
	in             reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	import         reduce using rule 32
	'('            reduce using rule 32
	')'            reduce using rule 32
	'['            reduce using rule 32
	']'            reduce using rule 32
	'{'            reduce using rule 32
	'}'            reduce using rule 32
	','            reduce using rule 32
	%eof           reduce using rule 32


State 17

	term -> string .                                    (rule 33)

	id             reduce using rule 33
	number         reduce using rule 33
	string         reduce using rule 33
	boolean        reduce using rule 33
	in             reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	import         reduce using rule 33
	'('            reduce using rule 33
	')'            reduce using rule 33
	'['            reduce using rule 33
	']'            reduce using rule 33
	'{'            reduce using rule 33
	'}'            reduce using rule 33
	','            reduce using rule 33
	%eof           reduce using rule 33


State 18

	term -> boolean .                                   (rule 34)

	id             reduce using rule 34
	number         reduce using rule 34
	string         reduce using rule 34
	boolean        reduce using rule 34
	in             reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	import         reduce using rule 34
	'('            reduce using rule 34
	')'            reduce using rule 34
	'['            reduce using rule 34
	']'            reduce using rule 34
	'{'            reduce using rule 34
	'}'            reduce using rule 34
	','            reduce using rule 34
	%eof           reduce using rule 34


State 19

	clause -> with . declarations in expr               (rule 28)

	id             shift, and enter state 3
	in             reduce using rule 46

	identifier     goto state 30
	definition     goto state 31
	declarations   goto state 41

State 20

	controlFlow -> if . expr then expr else expr        (rule 27)

	id             shift, and enter state 3
	number         shift, and enter state 16
	string         shift, and enter state 17
	boolean        shift, and enter state 18
	with           shift, and enter state 19
	if             shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 4
	definition     goto state 5
	record         goto state 6
	list           goto state 7
	tuple          goto state 8
	lambda         goto state 9
	fnApplication  goto state 10
	controlFlow    goto state 11
	clause         goto state 12
	term           goto state 13
	atom           goto state 14
	expr           goto state 40

State 21

	tuple -> '(' . expr tupleElems ')'                  (rule 19)
	atom -> '(' . expr ')'                              (rule 40)

	id             shift, and enter state 3
	number         shift, and enter state 16
	string         shift, and enter state 17
	boolean        shift, and enter state 18
	with           shift, and enter state 19
	if             shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 4
	definition     goto state 5
	record         goto state 6
	list           goto state 7
	tuple          goto state 8
	lambda         goto state 9
	fnApplication  goto state 10
	controlFlow    goto state 11
	clause         goto state 12
	term           goto state 13
	atom           goto state 14
	expr           goto state 39

State 22

	list -> '[' . listElements ']'                      (rule 16)

	id             shift, and enter state 3
	number         shift, and enter state 16
	string         shift, and enter state 17
	boolean        shift, and enter state 18
	with           shift, and enter state 19
	if             shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	']'            reduce using rule 13
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 4
	definition     goto state 5
	record         goto state 6
	listElements   goto state 37
	list           goto state 7
	tuple          goto state 8
	lambda         goto state 9
	fnApplication  goto state 10
	controlFlow    goto state 11
	clause         goto state 12
	term           goto state 13
	atom           goto state 14
	expr           goto state 38

State 23

	record -> '{' . pairs '}'                           (rule 12)

	id             shift, and enter state 3
	'}'            reduce using rule 9

	identifier     goto state 35
	pairs          goto state 36

State 24

	lambda -> '\\' . args '->' expr                     (rule 22)

	id             shift, and enter state 3
	'->'           reduce using rule 20

	identifier     goto state 33
	args           goto state 34

State 25

	script -> moduleDef . declarations imports          (rule 52)

	id             shift, and enter state 3
	import         reduce using rule 46
	%eof           reduce using rule 46

	identifier     goto state 30
	definition     goto state 31
	declarations   goto state 32

State 26

	%start_parseSagaScript -> script .                  (rule 0)

	%eof           accept


State 27

	moduleDef -> module . path where                    (rule 48)

	id             shift, and enter state 3

	identifier     goto state 28
	path           goto state 29

State 28

	path -> identifier .                                (rule 3)
	path -> identifier . '.' path                       (rule 4)

	where          reduce using rule 3
	import         reduce using rule 3
	'.'            shift, and enter state 62
	%eof           reduce using rule 3


State 29

	moduleDef -> module path . where                    (rule 48)

	where          shift, and enter state 61


State 30

	definition -> identifier . '=' expr                 (rule 5)

	'='            shift, and enter state 44


State 31

	declarations -> definition . declarations           (rule 47)

	id             shift, and enter state 3
	in             reduce using rule 46
	import         reduce using rule 46
	%eof           reduce using rule 46

	identifier     goto state 30
	definition     goto state 31
	declarations   goto state 60

State 32

	script -> moduleDef declarations . imports          (rule 52)

	import         shift, and enter state 59
	%eof           reduce using rule 50

	importMod      goto state 57
	imports        goto state 58

State 33

	args -> identifier . args                           (rule 21)

	id             shift, and enter state 3
	'->'           reduce using rule 20

	identifier     goto state 33
	args           goto state 56

State 34

	lambda -> '\\' args . '->' expr                     (rule 22)

	'->'           shift, and enter state 55


State 35

	pairs -> identifier . ':' expr ',' pairs            (rule 10)
	pairs -> identifier . ':' expr                      (rule 11)

	':'            shift, and enter state 54


State 36

	record -> '{' pairs . '}'                           (rule 12)

	'}'            shift, and enter state 53


State 37

	list -> '[' listElements . ']'                      (rule 16)

	']'            shift, and enter state 52


State 38

	listElements -> expr .                              (rule 14)
	listElements -> expr . ',' listElements             (rule 15)

	']'            reduce using rule 14
	','            shift, and enter state 51


State 39

	tuple -> '(' expr . tupleElems ')'                  (rule 19)
	atom -> '(' expr . ')'                              (rule 40)

	')'            shift, and enter state 49
	','            shift, and enter state 50

	tupleElems     goto state 48

State 40

	controlFlow -> if expr . then expr else expr        (rule 27)

	then           shift, and enter state 47


State 41

	clause -> with declarations . in expr               (rule 28)

	in             shift, and enter state 46


State 42

	atom -> identifier .                                (rule 38)

	id             reduce using rule 38
	number         reduce using rule 38
	string         reduce using rule 38
	boolean        reduce using rule 38
	in             reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	import         reduce using rule 38
	'('            reduce using rule 38
	')'            reduce using rule 38
	'['            reduce using rule 38
	']'            reduce using rule 38
	'{'            reduce using rule 38
	'}'            reduce using rule 38
	','            reduce using rule 38
	%eof           reduce using rule 38


State 43

	fnApplication -> fnApplication atom .               (rule 25)

	id             reduce using rule 25
	number         reduce using rule 25
	string         reduce using rule 25
	boolean        reduce using rule 25
	in             reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	import         reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'['            reduce using rule 25
	']'            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	','            reduce using rule 25
	%eof           reduce using rule 25


State 44

	definition -> identifier '=' . expr                 (rule 5)

	id             shift, and enter state 3
	number         shift, and enter state 16
	string         shift, and enter state 17
	boolean        shift, and enter state 18
	with           shift, and enter state 19
	if             shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 4
	definition     goto state 5
	record         goto state 6
	list           goto state 7
	tuple          goto state 8
	lambda         goto state 9
	fnApplication  goto state 10
	controlFlow    goto state 11
	clause         goto state 12
	term           goto state 13
	atom           goto state 14
	expr           goto state 45

State 45

	definition -> identifier '=' expr .                 (rule 5)

	id             reduce using rule 5
	in             reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	import         reduce using rule 5
	')'            reduce using rule 5
	']'            reduce using rule 5
	'}'            reduce using rule 5
	','            reduce using rule 5
	%eof           reduce using rule 5


State 46

	clause -> with declarations in . expr               (rule 28)

	id             shift, and enter state 3
	number         shift, and enter state 16
	string         shift, and enter state 17
	boolean        shift, and enter state 18
	with           shift, and enter state 19
	if             shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 4
	definition     goto state 5
	record         goto state 6
	list           goto state 7
	tuple          goto state 8
	lambda         goto state 9
	fnApplication  goto state 10
	controlFlow    goto state 11
	clause         goto state 12
	term           goto state 13
	atom           goto state 14
	expr           goto state 72

State 47

	controlFlow -> if expr then . expr else expr        (rule 27)

	id             shift, and enter state 3
	number         shift, and enter state 16
	string         shift, and enter state 17
	boolean        shift, and enter state 18
	with           shift, and enter state 19
	if             shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 4
	definition     goto state 5
	record         goto state 6
	list           goto state 7
	tuple          goto state 8
	lambda         goto state 9
	fnApplication  goto state 10
	controlFlow    goto state 11
	clause         goto state 12
	term           goto state 13
	atom           goto state 14
	expr           goto state 71

State 48

	tuple -> '(' expr tupleElems . ')'                  (rule 19)

	')'            shift, and enter state 70


State 49

	atom -> '(' expr ')' .                              (rule 40)

	id             reduce using rule 40
	number         reduce using rule 40
	string         reduce using rule 40
	boolean        reduce using rule 40
	in             reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	import         reduce using rule 40
	'('            reduce using rule 40
	')'            reduce using rule 40
	'['            reduce using rule 40
	']'            reduce using rule 40
	'{'            reduce using rule 40
	'}'            reduce using rule 40
	','            reduce using rule 40
	%eof           reduce using rule 40


State 50

	tupleElems -> ',' . expr                            (rule 17)
	tupleElems -> ',' . expr tupleElems                 (rule 18)

	id             shift, and enter state 3
	number         shift, and enter state 16
	string         shift, and enter state 17
	boolean        shift, and enter state 18
	with           shift, and enter state 19
	if             shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 4
	definition     goto state 5
	record         goto state 6
	list           goto state 7
	tuple          goto state 8
	lambda         goto state 9
	fnApplication  goto state 10
	controlFlow    goto state 11
	clause         goto state 12
	term           goto state 13
	atom           goto state 14
	expr           goto state 69

State 51

	listElements -> expr ',' . listElements             (rule 15)

	id             shift, and enter state 3
	number         shift, and enter state 16
	string         shift, and enter state 17
	boolean        shift, and enter state 18
	with           shift, and enter state 19
	if             shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	']'            reduce using rule 13
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 4
	definition     goto state 5
	record         goto state 6
	listElements   goto state 68
	list           goto state 7
	tuple          goto state 8
	lambda         goto state 9
	fnApplication  goto state 10
	controlFlow    goto state 11
	clause         goto state 12
	term           goto state 13
	atom           goto state 14
	expr           goto state 38

State 52

	list -> '[' listElements ']' .                      (rule 16)

	id             reduce using rule 16
	number         reduce using rule 16
	string         reduce using rule 16
	boolean        reduce using rule 16
	in             reduce using rule 16
	then           reduce using rule 16
	else           reduce using rule 16
	import         reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'['            reduce using rule 16
	']'            reduce using rule 16
	'{'            reduce using rule 16
	'}'            reduce using rule 16
	','            reduce using rule 16
	%eof           reduce using rule 16


State 53

	record -> '{' pairs '}' .                           (rule 12)

	id             reduce using rule 12
	number         reduce using rule 12
	string         reduce using rule 12
	boolean        reduce using rule 12
	in             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	import         reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'['            reduce using rule 12
	']'            reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	','            reduce using rule 12
	%eof           reduce using rule 12


State 54

	pairs -> identifier ':' . expr ',' pairs            (rule 10)
	pairs -> identifier ':' . expr                      (rule 11)

	id             shift, and enter state 3
	number         shift, and enter state 16
	string         shift, and enter state 17
	boolean        shift, and enter state 18
	with           shift, and enter state 19
	if             shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 4
	definition     goto state 5
	record         goto state 6
	list           goto state 7
	tuple          goto state 8
	lambda         goto state 9
	fnApplication  goto state 10
	controlFlow    goto state 11
	clause         goto state 12
	term           goto state 13
	atom           goto state 14
	expr           goto state 67

State 55

	lambda -> '\\' args '->' . expr                     (rule 22)

	id             shift, and enter state 3
	number         shift, and enter state 16
	string         shift, and enter state 17
	boolean        shift, and enter state 18
	with           shift, and enter state 19
	if             shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 4
	definition     goto state 5
	record         goto state 6
	list           goto state 7
	tuple          goto state 8
	lambda         goto state 9
	fnApplication  goto state 10
	controlFlow    goto state 11
	clause         goto state 12
	term           goto state 13
	atom           goto state 14
	expr           goto state 66

State 56

	args -> identifier args .                           (rule 21)

	'->'           reduce using rule 21


State 57

	imports -> importMod . imports                      (rule 51)

	import         shift, and enter state 59
	%eof           reduce using rule 50

	importMod      goto state 57
	imports        goto state 65

State 58

	script -> moduleDef declarations imports .          (rule 52)

	%eof           reduce using rule 52


State 59

	importMod -> import . path                          (rule 49)

	id             shift, and enter state 3

	identifier     goto state 28
	path           goto state 64

State 60

	declarations -> definition declarations .           (rule 47)

	in             reduce using rule 47
	import         reduce using rule 47
	%eof           reduce using rule 47


State 61

	moduleDef -> module path where .                    (rule 48)

	id             reduce using rule 48
	import         reduce using rule 48
	%eof           reduce using rule 48


State 62

	path -> identifier '.' . path                       (rule 4)

	id             shift, and enter state 3

	identifier     goto state 28
	path           goto state 63

State 63

	path -> identifier '.' path .                       (rule 4)

	where          reduce using rule 4
	import         reduce using rule 4
	%eof           reduce using rule 4


State 64

	importMod -> import path .                          (rule 49)

	import         reduce using rule 49
	%eof           reduce using rule 49


State 65

	imports -> importMod imports .                      (rule 51)

	%eof           reduce using rule 51


State 66

	lambda -> '\\' args '->' expr .                     (rule 22)

	id             reduce using rule 22
	in             reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	import         reduce using rule 22
	')'            reduce using rule 22
	']'            reduce using rule 22
	'}'            reduce using rule 22
	','            reduce using rule 22
	%eof           reduce using rule 22


State 67

	pairs -> identifier ':' expr . ',' pairs            (rule 10)
	pairs -> identifier ':' expr .                      (rule 11)

	'}'            reduce using rule 11
	','            shift, and enter state 75


State 68

	listElements -> expr ',' listElements .             (rule 15)

	']'            reduce using rule 15


State 69

	tupleElems -> ',' expr .                            (rule 17)
	tupleElems -> ',' expr . tupleElems                 (rule 18)

	')'            reduce using rule 17
	','            shift, and enter state 50

	tupleElems     goto state 74

State 70

	tuple -> '(' expr tupleElems ')' .                  (rule 19)

	id             reduce using rule 19
	number         reduce using rule 19
	string         reduce using rule 19
	boolean        reduce using rule 19
	in             reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	import         reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'['            reduce using rule 19
	']'            reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	','            reduce using rule 19
	%eof           reduce using rule 19


State 71

	controlFlow -> if expr then expr . else expr        (rule 27)

	else           shift, and enter state 73


State 72

	clause -> with declarations in expr .               (rule 28)

	id             reduce using rule 28
	in             reduce using rule 28
	then           reduce using rule 28
	else           reduce using rule 28
	import         reduce using rule 28
	')'            reduce using rule 28
	']'            reduce using rule 28
	'}'            reduce using rule 28
	','            reduce using rule 28
	%eof           reduce using rule 28


State 73

	controlFlow -> if expr then expr else . expr        (rule 27)

	id             shift, and enter state 3
	number         shift, and enter state 16
	string         shift, and enter state 17
	boolean        shift, and enter state 18
	with           shift, and enter state 19
	if             shift, and enter state 20
	'('            shift, and enter state 21
	'['            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 4
	definition     goto state 5
	record         goto state 6
	list           goto state 7
	tuple          goto state 8
	lambda         goto state 9
	fnApplication  goto state 10
	controlFlow    goto state 11
	clause         goto state 12
	term           goto state 13
	atom           goto state 14
	expr           goto state 77

State 74

	tupleElems -> ',' expr tupleElems .                 (rule 18)

	')'            reduce using rule 18


State 75

	pairs -> identifier ':' expr ',' . pairs            (rule 10)

	id             shift, and enter state 3
	'}'            reduce using rule 9

	identifier     goto state 35
	pairs          goto state 76

State 76

	pairs -> identifier ':' expr ',' pairs .            (rule 10)

	'}'            reduce using rule 10


State 77

	controlFlow -> if expr then expr else expr .        (rule 27)

	id             reduce using rule 27
	in             reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	import         reduce using rule 27
	')'            reduce using rule 27
	']'            reduce using rule 27
	'}'            reduce using rule 27
	','            reduce using rule 27
	%eof           reduce using rule 27


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 53
Number of terminals: 32
Number of non-terminals: 28
Number of states: 78
