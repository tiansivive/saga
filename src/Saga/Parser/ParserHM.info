-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from ./src/Saga/Parser/ParserHM.y
-----------------------------------------------------------------------------


rule 28 is unused

terminal '==' is unused
terminal '!=' is unused
terminal '<' is unused
terminal '<=' is unused
terminal '>' is unused
terminal '>=' is unused
terminal '||' is unused
terminal '&&' is unused
terminal op is unused
terminal in is unused
terminal with is unused
terminal match is unused
terminal return is unused
terminal alias is unused
terminal kind is unused
terminal forall is unused
terminal exists is unused
terminal proof is unused
terminal infer is unused
terminal protocol is unused
terminal interface is unused
terminal instance is unused
terminal module is unused
terminal import is unused
terminal '[' is unused
terminal ']' is unused
terminal '<-' is unused
terminal newline is unused
terminal eof is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseSagaScript -> script                   (0)
	%start_parseSagaExpr -> expr                       (1)
	%start_parseSagaType -> typeExpr                   (2)
	%start_parseSagaKind -> kindExpr                   (3)
	%start_parseSagaDec -> dec                         (4)
	identifier -> id                                   (5)
	pairs ->                                           (6)
	pairs -> identifier ':' expr ',' pairs             (7)
	pairs -> identifier ':' expr                       (8)
	record -> '{' pairs '}'                            (9)
	tupleElems -> ',' expr                             (10)
	tupleElems -> ',' expr tupleElems                  (11)
	tuple -> '(' expr tupleElems ')'                   (12)
	params ->                                          (13)
	params -> params identifier                        (14)
	args ->                                            (15)
	args -> args atom                                  (16)
	fnApplication -> atom args '!'                     (17)
	controlFlow -> if expr then expr else expr         (18)
	term -> number                                     (19)
	term -> boolean                                    (20)
	term -> string                                     (21)
	atom -> identifier                                 (22)
	atom -> atom '.' identifier                        (23)
	atom -> term                                       (24)
	atom -> tuple                                      (25)
	atom -> record                                     (26)
	atom -> '(' expr ')'                               (27)
	assignment -> identifier '=' expr                  (28)
	expr -> controlFlow                                (29)
	expr -> fnApplication                              (30)
	expr -> '\\' params '->' expr                      (31)
	expr -> atom                                       (32)
	expr -> '.' atom                                   (33)
	expr -> expr '+' expr                              (34)
	expr -> expr '-' expr                              (35)
	expr -> expr '*' expr                              (36)
	expr -> expr '/' expr                              (37)
	tpairs ->                                          (38)
	tpairs -> identifier ':' typeExpr ',' tpairs       (39)
	tpairs -> identifier ':' typeExpr                  (40)
	trecord -> '{' tpairs '}'                          (41)
	ttupleElems -> ',' typeExpr                        (42)
	ttupleElems -> ',' typeExpr ttupleElems            (43)
	ttuple -> '(' typeExpr ttupleElems ')'             (44)
	type -> number                                     (45)
	type -> boolean                                    (46)
	type -> string                                     (47)
	type -> ttuple                                     (48)
	type -> trecord                                    (49)
	typeAtom -> type                                   (50)
	typeAtom -> identifier                             (51)
	typeAtom -> '(' typeExpr ')'                       (52)
	typeArgs ->                                        (53)
	typeArgs -> typeArgs typeAtom                      (54)
	tbinding -> identifier '=' typeExpr                (55)
	tbinding -> identifier implements typeExpr         (56)
	tbinding -> identifier '|->' typeExpr              (57)
	tbinding -> identifier '|' typeExpr                (58)
	tbindings -> tbinding                              (59)
	tbindings -> tbindings ',' tbinding                (60)
	typeExpr -> typeAtom '->' typeExpr                 (61)
	typeExpr -> '\\' params '=>' typeExpr              (62)
	typeExpr -> typeAtom typeArgs '!'                  (63)
	typeExpr -> typeAtom                               (64)
	typeExpr -> typeExpr where tbindings               (65)
	typeAnnotation ->                                  (66)
	typeAnnotation -> ':' typeExpr                     (67)
	kindExpr -> kindExpr '->' kindExpr                 (68)
	kindExpr -> identifier                             (69)
	kindAnnotation ->                                  (70)
	kindAnnotation -> '::' kindExpr                    (71)
	dataExpr -> identifier ':' typeExpr                (72)
	dataExprs -> dataExpr                              (73)
	dataExprs -> dataExprs '|' dataExpr                (74)
	dec -> let identifier typeAnnotation kindAnnotation '=' expr   (75)
	dec -> data identifier kindAnnotation '=' dataExprs   (76)
	dec -> ty identifier kindAnnotation '=' typeExpr   (77)
	declarations -> dec                                (78)
	declarations -> declarations dec                   (79)
	script -> declarations                             (80)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	id             { L.RangedToken (T.Id _) _ }
	number         { L.RangedToken (T.Number _) _ }
	string         { L.RangedToken (T.String _) _ }
	boolean        { L.RangedToken (T.Boolean _) _ }
	'!'            { L.RangedToken (T.Operator "!") _ }
	'+'            { L.RangedToken (T.Operator "+") _ }
	'-'            { L.RangedToken (T.Operator "-") _ }
	'*'            { L.RangedToken (T.Operator "*") _ }
	'/'            { L.RangedToken (T.Operator "/") _ }
	'=='           { L.RangedToken (T.Operator "==") _ }
	'!='           { L.RangedToken (T.Operator "!=") _ }
	'<'            { L.RangedToken (T.Operator "<") _ }
	'<='           { L.RangedToken (T.Operator "<=") _ }
	'>'            { L.RangedToken (T.Operator ">") _ }
	'>='           { L.RangedToken (T.Operator ">=") _ }
	'||'           { L.RangedToken (T.Operator "||") _ }
	'&&'           { L.RangedToken (T.Operator "&&") _ }
	op             { L.RangedToken (T.Operator _) _ }
	let            { L.RangedToken T.Let _ }
	in             { L.RangedToken T.In _ }
	where          { L.RangedToken T.Where _ }
	with           { L.RangedToken T.With _ }
	if             { L.RangedToken T.If _ }
	then           { L.RangedToken T.Then _ }
	else           { L.RangedToken T.Else _ }
	match          { L.RangedToken T.Match _ }
	return         { L.RangedToken T.Return _ }
	data           { L.RangedToken T.Data _ }
	ty             { L.RangedToken T.Type _ }
	alias          { L.RangedToken T.Alias _ }
	kind           { L.RangedToken T.Kind _ }
	forall         { L.RangedToken T.Forall _ }
	exists         { L.RangedToken T.Exists _ }
	proof          { L.RangedToken T.Proof _ }
	infer          { L.RangedToken T.Infer _ }
	protocol       { L.RangedToken T.Protocol _ }
	interface      { L.RangedToken T.Interface _ }
	instance       { L.RangedToken T.Instance _ }
	implements     { L.RangedToken T.Implements _ }
	module         { L.RangedToken T.Module _ }
	import         { L.RangedToken T.Import _ }
	'('            { L.RangedToken T.LParen _ }
	')'            { L.RangedToken T.RParen _ }
	'['            { L.RangedToken T.LBrack _ }
	']'            { L.RangedToken T.RBrack _ }
	'{'            { L.RangedToken T.LCurly _ }
	'}'            { L.RangedToken T.RCurly _ }
	':'            { L.RangedToken T.Colon _ }
	','            { L.RangedToken T.Comma _ }
	'->'           { L.RangedToken T.Arrow _ }
	'<-'           { L.RangedToken T.BackArrow _ }
	'=>'           { L.RangedToken T.FatArrow _ }
	'|->'          { L.RangedToken T.PipeArrow _ }
	'='            { L.RangedToken T.Equals _ }
	'|'            { L.RangedToken T.Pipe _ }
	'.'            { L.RangedToken T.Dot _ }
	'::'           { L.RangedToken T.Section _ }
	'\\'           { L.RangedToken T.BackSlash _ }
	newline        { L.RangedToken T.Newline _ }
	eof            { L.RangedToken T.EOF _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseSagaScript rule  0
	%start_parseSagaExpr rule  1
	%start_parseSagaType rule  2
	%start_parseSagaKind rule  3
	%start_parseSagaDec rule  4
	identifier      rule  5
	pairs           rules 6, 7, 8
	record          rule  9
	tupleElems      rules 10, 11
	tuple           rule  12
	params          rules 13, 14
	args            rules 15, 16
	fnApplication   rule  17
	controlFlow     rule  18
	term            rules 19, 20, 21
	atom            rules 22, 23, 24, 25, 26, 27
	assignment      rule  28
	expr            rules 29, 30, 31, 32, 33, 34, 35, 36, 37
	tpairs          rules 38, 39, 40
	trecord         rule  41
	ttupleElems     rules 42, 43
	ttuple          rule  44
	type            rules 45, 46, 47, 48, 49
	typeAtom        rules 50, 51, 52
	typeArgs        rules 53, 54
	tbinding        rules 55, 56, 57, 58
	tbindings       rules 59, 60
	typeExpr        rules 61, 62, 63, 64, 65
	typeAnnotation  rules 66, 67
	kindExpr        rules 68, 69
	kindAnnotation  rules 70, 71
	dataExpr        rule  72
	dataExprs       rules 73, 74
	dec             rules 75, 76, 77
	declarations    rules 78, 79
	script          rule  80

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseSagaScript -> . script                  (rule 0)

	let            shift, and enter state 8
	data           shift, and enter state 9
	ty             shift, and enter state 10

	dec            goto state 41
	declarations   goto state 42
	script         goto state 43

State 1

	%start_parseSagaExpr -> . expr                      (rule 1)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 32

State 2

	%start_parseSagaType -> . typeExpr                  (rule 2)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 18

State 3

	%start_parseSagaKind -> . kindExpr                  (rule 3)

	id             shift, and enter state 6

	identifier     goto state 11
	kindExpr       goto state 12

State 4

	%start_parseSagaDec -> . dec                        (rule 4)

	let            shift, and enter state 8
	data           shift, and enter state 9
	ty             shift, and enter state 10

	dec            goto state 7

State 5

	identifier -> . id                                  (rule 5)

	id             shift, and enter state 6


State 6

	identifier -> id .                                  (rule 5)

	id             reduce using rule 5
	number         reduce using rule 5
	string         reduce using rule 5
	boolean        reduce using rule 5
	'!'            reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	let            reduce using rule 5
	where          reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	data           reduce using rule 5
	ty             reduce using rule 5
	implements     reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'{'            reduce using rule 5
	'}'            reduce using rule 5
	':'            reduce using rule 5
	','            reduce using rule 5
	'->'           reduce using rule 5
	'=>'           reduce using rule 5
	'|->'          reduce using rule 5
	'='            reduce using rule 5
	'|'            reduce using rule 5
	'.'            reduce using rule 5
	'::'           reduce using rule 5
	%eof           reduce using rule 5


State 7

	%start_parseSagaDec -> dec .                        (rule 4)

	%eof           accept


State 8

	dec -> let . identifier typeAnnotation kindAnnotation '=' expr    (rule 75)

	id             shift, and enter state 6

	identifier     goto state 67

State 9

	dec -> data . identifier kindAnnotation '=' dataExprs    (rule 76)

	id             shift, and enter state 6

	identifier     goto state 66

State 10

	dec -> ty . identifier kindAnnotation '=' typeExpr    (rule 77)

	id             shift, and enter state 6

	identifier     goto state 65

State 11

	kindExpr -> identifier .                            (rule 69)

	'->'           reduce using rule 69
	'='            reduce using rule 69
	%eof           reduce using rule 69


State 12

	%start_parseSagaKind -> kindExpr .                  (rule 3)
	kindExpr -> kindExpr . '->' kindExpr                (rule 68)

	'->'           shift, and enter state 64
	%eof           accept


State 13

	typeAtom -> identifier .                            (rule 51)

	id             reduce using rule 51
	number         reduce using rule 51
	string         reduce using rule 51
	boolean        reduce using rule 51
	'!'            reduce using rule 51
	let            reduce using rule 51
	where          reduce using rule 51
	data           reduce using rule 51
	ty             reduce using rule 51
	'('            reduce using rule 51
	')'            reduce using rule 51
	'{'            reduce using rule 51
	'}'            reduce using rule 51
	','            reduce using rule 51
	'->'           reduce using rule 51
	'='            reduce using rule 51
	'|'            reduce using rule 51
	'::'           reduce using rule 51
	%eof           reduce using rule 51


State 14

	type -> trecord .                                   (rule 49)

	id             reduce using rule 49
	number         reduce using rule 49
	string         reduce using rule 49
	boolean        reduce using rule 49
	'!'            reduce using rule 49
	let            reduce using rule 49
	where          reduce using rule 49
	data           reduce using rule 49
	ty             reduce using rule 49
	'('            reduce using rule 49
	')'            reduce using rule 49
	'{'            reduce using rule 49
	'}'            reduce using rule 49
	','            reduce using rule 49
	'->'           reduce using rule 49
	'='            reduce using rule 49
	'|'            reduce using rule 49
	'::'           reduce using rule 49
	%eof           reduce using rule 49


State 15

	type -> ttuple .                                    (rule 48)

	id             reduce using rule 48
	number         reduce using rule 48
	string         reduce using rule 48
	boolean        reduce using rule 48
	'!'            reduce using rule 48
	let            reduce using rule 48
	where          reduce using rule 48
	data           reduce using rule 48
	ty             reduce using rule 48
	'('            reduce using rule 48
	')'            reduce using rule 48
	'{'            reduce using rule 48
	'}'            reduce using rule 48
	','            reduce using rule 48
	'->'           reduce using rule 48
	'='            reduce using rule 48
	'|'            reduce using rule 48
	'::'           reduce using rule 48
	%eof           reduce using rule 48


State 16

	typeAtom -> type .                                  (rule 50)

	id             reduce using rule 50
	number         reduce using rule 50
	string         reduce using rule 50
	boolean        reduce using rule 50
	'!'            reduce using rule 50
	let            reduce using rule 50
	where          reduce using rule 50
	data           reduce using rule 50
	ty             reduce using rule 50
	'('            reduce using rule 50
	')'            reduce using rule 50
	'{'            reduce using rule 50
	'}'            reduce using rule 50
	','            reduce using rule 50
	'->'           reduce using rule 50
	'='            reduce using rule 50
	'|'            reduce using rule 50
	'::'           reduce using rule 50
	%eof           reduce using rule 50


State 17

	typeExpr -> typeAtom . '->' typeExpr                (rule 61)
	typeExpr -> typeAtom . typeArgs '!'                 (rule 63)
	typeExpr -> typeAtom .                              (rule 64)

	id             reduce using rule 53
	number         reduce using rule 53
	string         reduce using rule 53
	boolean        reduce using rule 53
	'!'            reduce using rule 53
	let            reduce using rule 64
	where          reduce using rule 64
	data           reduce using rule 64
	ty             reduce using rule 64
	'('            reduce using rule 53
	')'            reduce using rule 64
	'{'            reduce using rule 53
	'}'            reduce using rule 64
	','            reduce using rule 64
	'->'           shift, and enter state 63
	'='            reduce using rule 64
	'|'            reduce using rule 64
	'::'           reduce using rule 64
	%eof           reduce using rule 64

	typeArgs       goto state 62

State 18

	%start_parseSagaType -> typeExpr .                  (rule 2)
	typeExpr -> typeExpr . where tbindings              (rule 65)

	where          shift, and enter state 61
	%eof           accept


State 19

	type -> number .                                    (rule 45)

	id             reduce using rule 45
	number         reduce using rule 45
	string         reduce using rule 45
	boolean        reduce using rule 45
	'!'            reduce using rule 45
	let            reduce using rule 45
	where          reduce using rule 45
	data           reduce using rule 45
	ty             reduce using rule 45
	'('            reduce using rule 45
	')'            reduce using rule 45
	'{'            reduce using rule 45
	'}'            reduce using rule 45
	','            reduce using rule 45
	'->'           reduce using rule 45
	'='            reduce using rule 45
	'|'            reduce using rule 45
	'::'           reduce using rule 45
	%eof           reduce using rule 45


State 20

	type -> string .                                    (rule 47)

	id             reduce using rule 47
	number         reduce using rule 47
	string         reduce using rule 47
	boolean        reduce using rule 47
	'!'            reduce using rule 47
	let            reduce using rule 47
	where          reduce using rule 47
	data           reduce using rule 47
	ty             reduce using rule 47
	'('            reduce using rule 47
	')'            reduce using rule 47
	'{'            reduce using rule 47
	'}'            reduce using rule 47
	','            reduce using rule 47
	'->'           reduce using rule 47
	'='            reduce using rule 47
	'|'            reduce using rule 47
	'::'           reduce using rule 47
	%eof           reduce using rule 47


State 21

	type -> boolean .                                   (rule 46)

	id             reduce using rule 46
	number         reduce using rule 46
	string         reduce using rule 46
	boolean        reduce using rule 46
	'!'            reduce using rule 46
	let            reduce using rule 46
	where          reduce using rule 46
	data           reduce using rule 46
	ty             reduce using rule 46
	'('            reduce using rule 46
	')'            reduce using rule 46
	'{'            reduce using rule 46
	'}'            reduce using rule 46
	','            reduce using rule 46
	'->'           reduce using rule 46
	'='            reduce using rule 46
	'|'            reduce using rule 46
	'::'           reduce using rule 46
	%eof           reduce using rule 46


State 22

	ttuple -> '(' . typeExpr ttupleElems ')'            (rule 44)
	typeAtom -> '(' . typeExpr ')'                      (rule 52)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 60

State 23

	trecord -> '{' . tpairs '}'                         (rule 41)

	id             shift, and enter state 6
	'}'            reduce using rule 38

	identifier     goto state 58
	tpairs         goto state 59

State 24

	typeExpr -> '\\' . params '=>' typeExpr             (rule 62)

	id             reduce using rule 13
	'=>'           reduce using rule 13

	params         goto state 57

State 25

	atom -> identifier .                                (rule 22)

	id             reduce using rule 22
	number         reduce using rule 22
	string         reduce using rule 22
	boolean        reduce using rule 22
	'!'            reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	let            reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	data           reduce using rule 22
	ty             reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	','            reduce using rule 22
	'.'            reduce using rule 22
	%eof           reduce using rule 22


State 26

	atom -> record .                                    (rule 26)

	id             reduce using rule 26
	number         reduce using rule 26
	string         reduce using rule 26
	boolean        reduce using rule 26
	'!'            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	let            reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	data           reduce using rule 26
	ty             reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	','            reduce using rule 26
	'.'            reduce using rule 26
	%eof           reduce using rule 26


State 27

	atom -> tuple .                                     (rule 25)

	id             reduce using rule 25
	number         reduce using rule 25
	string         reduce using rule 25
	boolean        reduce using rule 25
	'!'            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	let            reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	data           reduce using rule 25
	ty             reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	','            reduce using rule 25
	'.'            reduce using rule 25
	%eof           reduce using rule 25


State 28

	expr -> fnApplication .                             (rule 30)

	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'*'            reduce using rule 30
	'/'            reduce using rule 30
	let            reduce using rule 30
	then           reduce using rule 30
	else           reduce using rule 30
	data           reduce using rule 30
	ty             reduce using rule 30
	')'            reduce using rule 30
	'}'            reduce using rule 30
	','            reduce using rule 30
	%eof           reduce using rule 30


State 29

	expr -> controlFlow .                               (rule 29)

	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'*'            reduce using rule 29
	'/'            reduce using rule 29
	let            reduce using rule 29
	then           reduce using rule 29
	else           reduce using rule 29
	data           reduce using rule 29
	ty             reduce using rule 29
	')'            reduce using rule 29
	'}'            reduce using rule 29
	','            reduce using rule 29
	%eof           reduce using rule 29


State 30

	atom -> term .                                      (rule 24)

	id             reduce using rule 24
	number         reduce using rule 24
	string         reduce using rule 24
	boolean        reduce using rule 24
	'!'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	let            reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	data           reduce using rule 24
	ty             reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	','            reduce using rule 24
	'.'            reduce using rule 24
	%eof           reduce using rule 24


State 31

	fnApplication -> atom . args '!'                    (rule 17)
	atom -> atom . '.' identifier                       (rule 23)
	expr -> atom .                                      (rule 32)

	id             reduce using rule 15
	number         reduce using rule 15
	string         reduce using rule 15
	boolean        reduce using rule 15
	'!'            reduce using rule 15
	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	let            reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	data           reduce using rule 32
	ty             reduce using rule 32
	'('            reduce using rule 15
	')'            reduce using rule 32
	'{'            reduce using rule 15
	'}'            reduce using rule 32
	','            reduce using rule 32
	'.'            shift, and enter state 56
	%eof           reduce using rule 32

	args           goto state 55

State 32

	%start_parseSagaExpr -> expr .                      (rule 1)
	expr -> expr . '+' expr                             (rule 34)
	expr -> expr . '-' expr                             (rule 35)
	expr -> expr . '*' expr                             (rule 36)
	expr -> expr . '/' expr                             (rule 37)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	%eof           accept


State 33

	term -> number .                                    (rule 19)

	id             reduce using rule 19
	number         reduce using rule 19
	string         reduce using rule 19
	boolean        reduce using rule 19
	'!'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	let            reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	data           reduce using rule 19
	ty             reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	','            reduce using rule 19
	'.'            reduce using rule 19
	%eof           reduce using rule 19


State 34

	term -> string .                                    (rule 21)

	id             reduce using rule 21
	number         reduce using rule 21
	string         reduce using rule 21
	boolean        reduce using rule 21
	'!'            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	let            reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	data           reduce using rule 21
	ty             reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	','            reduce using rule 21
	'.'            reduce using rule 21
	%eof           reduce using rule 21


State 35

	term -> boolean .                                   (rule 20)

	id             reduce using rule 20
	number         reduce using rule 20
	string         reduce using rule 20
	boolean        reduce using rule 20
	'!'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	let            reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	data           reduce using rule 20
	ty             reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	','            reduce using rule 20
	'.'            reduce using rule 20
	%eof           reduce using rule 20


State 36

	controlFlow -> if . expr then expr else expr        (rule 18)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 50

State 37

	tuple -> '(' . expr tupleElems ')'                  (rule 12)
	atom -> '(' . expr ')'                              (rule 27)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 49

State 38

	record -> '{' . pairs '}'                           (rule 9)

	id             shift, and enter state 6
	'}'            reduce using rule 6

	identifier     goto state 47
	pairs          goto state 48

State 39

	expr -> '.' . atom                                  (rule 33)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	'('            shift, and enter state 37
	'{'            shift, and enter state 38

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	term           goto state 30
	atom           goto state 46

State 40

	expr -> '\\' . params '->' expr                     (rule 31)

	id             reduce using rule 13
	'->'           reduce using rule 13

	params         goto state 45

State 41

	declarations -> dec .                               (rule 78)

	let            reduce using rule 78
	data           reduce using rule 78
	ty             reduce using rule 78
	%eof           reduce using rule 78


State 42

	declarations -> declarations . dec                  (rule 79)
	script -> declarations .                            (rule 80)

	let            shift, and enter state 8
	data           shift, and enter state 9
	ty             shift, and enter state 10
	%eof           reduce using rule 80

	dec            goto state 44

State 43

	%start_parseSagaScript -> script .                  (rule 0)

	%eof           accept


State 44

	declarations -> declarations dec .                  (rule 79)

	let            reduce using rule 79
	data           reduce using rule 79
	ty             reduce using rule 79
	%eof           reduce using rule 79


State 45

	params -> params . identifier                       (rule 14)
	expr -> '\\' params . '->' expr                     (rule 31)

	id             shift, and enter state 6
	'->'           shift, and enter state 100

	identifier     goto state 85

State 46

	atom -> atom . '.' identifier                       (rule 23)
	expr -> '.' atom .                                  (rule 33)

	'+'            reduce using rule 33
	'-'            reduce using rule 33
	'*'            reduce using rule 33
	'/'            reduce using rule 33
	let            reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	data           reduce using rule 33
	ty             reduce using rule 33
	')'            reduce using rule 33
	'}'            reduce using rule 33
	','            reduce using rule 33
	'.'            shift, and enter state 56
	%eof           reduce using rule 33


State 47

	pairs -> identifier . ':' expr ',' pairs            (rule 7)
	pairs -> identifier . ':' expr                      (rule 8)

	':'            shift, and enter state 99


State 48

	record -> '{' pairs . '}'                           (rule 9)

	'}'            shift, and enter state 98


State 49

	tuple -> '(' expr . tupleElems ')'                  (rule 12)
	atom -> '(' expr . ')'                              (rule 27)
	expr -> expr . '+' expr                             (rule 34)
	expr -> expr . '-' expr                             (rule 35)
	expr -> expr . '*' expr                             (rule 36)
	expr -> expr . '/' expr                             (rule 37)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	')'            shift, and enter state 96
	','            shift, and enter state 97

	tupleElems     goto state 95

State 50

	controlFlow -> if expr . then expr else expr        (rule 18)
	expr -> expr . '+' expr                             (rule 34)
	expr -> expr . '-' expr                             (rule 35)
	expr -> expr . '*' expr                             (rule 36)
	expr -> expr . '/' expr                             (rule 37)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	then           shift, and enter state 94


State 51

	expr -> expr '+' . expr                             (rule 34)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 93

State 52

	expr -> expr '-' . expr                             (rule 35)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 92

State 53

	expr -> expr '*' . expr                             (rule 36)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 91

State 54

	expr -> expr '/' . expr                             (rule 37)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 90

State 55

	args -> args . atom                                 (rule 16)
	fnApplication -> atom args . '!'                    (rule 17)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	'!'            shift, and enter state 89
	'('            shift, and enter state 37
	'{'            shift, and enter state 38

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	term           goto state 30
	atom           goto state 88

State 56

	atom -> atom '.' . identifier                       (rule 23)

	id             shift, and enter state 6

	identifier     goto state 87

State 57

	params -> params . identifier                       (rule 14)
	typeExpr -> '\\' params . '=>' typeExpr             (rule 62)

	id             shift, and enter state 6
	'=>'           shift, and enter state 86

	identifier     goto state 85

State 58

	tpairs -> identifier . ':' typeExpr ',' tpairs      (rule 39)
	tpairs -> identifier . ':' typeExpr                 (rule 40)

	':'            shift, and enter state 84


State 59

	trecord -> '{' tpairs . '}'                         (rule 41)

	'}'            shift, and enter state 83


State 60

	ttuple -> '(' typeExpr . ttupleElems ')'            (rule 44)
	typeAtom -> '(' typeExpr . ')'                      (rule 52)
	typeExpr -> typeExpr . where tbindings              (rule 65)

	where          shift, and enter state 61
	')'            shift, and enter state 81
	','            shift, and enter state 82

	ttupleElems    goto state 80

State 61

	typeExpr -> typeExpr where . tbindings              (rule 65)

	id             shift, and enter state 6

	identifier     goto state 77
	tbinding       goto state 78
	tbindings      goto state 79

State 62

	typeArgs -> typeArgs . typeAtom                     (rule 54)
	typeExpr -> typeAtom typeArgs . '!'                 (rule 63)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'!'            shift, and enter state 76
	'('            shift, and enter state 22
	'{'            shift, and enter state 23

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 75

State 63

	typeExpr -> typeAtom '->' . typeExpr                (rule 61)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 74

State 64

	kindExpr -> kindExpr '->' . kindExpr                (rule 68)

	id             shift, and enter state 6

	identifier     goto state 11
	kindExpr       goto state 73

State 65

	dec -> ty identifier . kindAnnotation '=' typeExpr    (rule 77)

	'='            reduce using rule 70
	'::'           shift, and enter state 71

	kindAnnotation goto state 72

State 66

	dec -> data identifier . kindAnnotation '=' dataExprs    (rule 76)

	'='            reduce using rule 70
	'::'           shift, and enter state 71

	kindAnnotation goto state 70

State 67

	dec -> let identifier . typeAnnotation kindAnnotation '=' expr    (rule 75)

	':'            shift, and enter state 69
	'='            reduce using rule 66
	'::'           reduce using rule 66

	typeAnnotation goto state 68

State 68

	dec -> let identifier typeAnnotation . kindAnnotation '=' expr    (rule 75)

	'='            reduce using rule 70
	'::'           shift, and enter state 71

	kindAnnotation goto state 119

State 69

	typeAnnotation -> ':' . typeExpr                    (rule 67)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 118

State 70

	dec -> data identifier kindAnnotation . '=' dataExprs    (rule 76)

	'='            shift, and enter state 117


State 71

	kindAnnotation -> '::' . kindExpr                   (rule 71)

	id             shift, and enter state 6

	identifier     goto state 11
	kindExpr       goto state 116

State 72

	dec -> ty identifier kindAnnotation . '=' typeExpr    (rule 77)

	'='            shift, and enter state 115


State 73

	kindExpr -> kindExpr . '->' kindExpr                (rule 68)
	kindExpr -> kindExpr '->' kindExpr .                (rule 68)

	'->'           reduce using rule 68
	'='            reduce using rule 68
	%eof           reduce using rule 68


State 74

	typeExpr -> typeAtom '->' typeExpr .                (rule 61)
	typeExpr -> typeExpr . where tbindings              (rule 65)

	let            reduce using rule 61
	where          shift, and enter state 61
	data           reduce using rule 61
	ty             reduce using rule 61
	')'            reduce using rule 61
	'}'            reduce using rule 61
	','            reduce using rule 61
	'='            reduce using rule 61
	'|'            reduce using rule 61
	'::'           reduce using rule 61
	%eof           reduce using rule 61


State 75

	typeArgs -> typeArgs typeAtom .                     (rule 54)

	id             reduce using rule 54
	number         reduce using rule 54
	string         reduce using rule 54
	boolean        reduce using rule 54
	'!'            reduce using rule 54
	'('            reduce using rule 54
	'{'            reduce using rule 54


State 76

	typeExpr -> typeAtom typeArgs '!' .                 (rule 63)

	let            reduce using rule 63
	where          reduce using rule 63
	data           reduce using rule 63
	ty             reduce using rule 63
	')'            reduce using rule 63
	'}'            reduce using rule 63
	','            reduce using rule 63
	'='            reduce using rule 63
	'|'            reduce using rule 63
	'::'           reduce using rule 63
	%eof           reduce using rule 63


State 77

	tbinding -> identifier . '=' typeExpr               (rule 55)
	tbinding -> identifier . implements typeExpr        (rule 56)
	tbinding -> identifier . '|->' typeExpr             (rule 57)
	tbinding -> identifier . '|' typeExpr               (rule 58)

	implements     shift, and enter state 111
	'|->'          shift, and enter state 112
	'='            shift, and enter state 113
	'|'            shift, and enter state 114


State 78

	tbindings -> tbinding .                             (rule 59)

	let            reduce using rule 59
	where          reduce using rule 59
	data           reduce using rule 59
	ty             reduce using rule 59
	')'            reduce using rule 59
	'}'            reduce using rule 59
	','            reduce using rule 59
	'='            reduce using rule 59
	'|'            reduce using rule 59
	'::'           reduce using rule 59
	%eof           reduce using rule 59


State 79

	tbindings -> tbindings . ',' tbinding               (rule 60)
	typeExpr -> typeExpr where tbindings .              (rule 65)

	let            reduce using rule 65
	where          reduce using rule 65
	data           reduce using rule 65
	ty             reduce using rule 65
	')'            reduce using rule 65
	'}'            reduce using rule 65
	','            shift, and enter state 110
	'='            reduce using rule 65
	'|'            reduce using rule 65
	'::'           reduce using rule 65
	%eof           reduce using rule 65


State 80

	ttuple -> '(' typeExpr ttupleElems . ')'            (rule 44)

	')'            shift, and enter state 109


State 81

	typeAtom -> '(' typeExpr ')' .                      (rule 52)

	id             reduce using rule 52
	number         reduce using rule 52
	string         reduce using rule 52
	boolean        reduce using rule 52
	'!'            reduce using rule 52
	let            reduce using rule 52
	where          reduce using rule 52
	data           reduce using rule 52
	ty             reduce using rule 52
	'('            reduce using rule 52
	')'            reduce using rule 52
	'{'            reduce using rule 52
	'}'            reduce using rule 52
	','            reduce using rule 52
	'->'           reduce using rule 52
	'='            reduce using rule 52
	'|'            reduce using rule 52
	'::'           reduce using rule 52
	%eof           reduce using rule 52


State 82

	ttupleElems -> ',' . typeExpr                       (rule 42)
	ttupleElems -> ',' . typeExpr ttupleElems           (rule 43)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 108

State 83

	trecord -> '{' tpairs '}' .                         (rule 41)

	id             reduce using rule 41
	number         reduce using rule 41
	string         reduce using rule 41
	boolean        reduce using rule 41
	'!'            reduce using rule 41
	let            reduce using rule 41
	where          reduce using rule 41
	data           reduce using rule 41
	ty             reduce using rule 41
	'('            reduce using rule 41
	')'            reduce using rule 41
	'{'            reduce using rule 41
	'}'            reduce using rule 41
	','            reduce using rule 41
	'->'           reduce using rule 41
	'='            reduce using rule 41
	'|'            reduce using rule 41
	'::'           reduce using rule 41
	%eof           reduce using rule 41


State 84

	tpairs -> identifier ':' . typeExpr ',' tpairs      (rule 39)
	tpairs -> identifier ':' . typeExpr                 (rule 40)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 107

State 85

	params -> params identifier .                       (rule 14)

	id             reduce using rule 14
	'->'           reduce using rule 14
	'=>'           reduce using rule 14


State 86

	typeExpr -> '\\' params '=>' . typeExpr             (rule 62)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 106

State 87

	atom -> atom '.' identifier .                       (rule 23)

	id             reduce using rule 23
	number         reduce using rule 23
	string         reduce using rule 23
	boolean        reduce using rule 23
	'!'            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	let            reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	data           reduce using rule 23
	ty             reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	','            reduce using rule 23
	'.'            reduce using rule 23
	%eof           reduce using rule 23


State 88

	args -> args atom .                                 (rule 16)
	atom -> atom . '.' identifier                       (rule 23)

	id             reduce using rule 16
	number         reduce using rule 16
	string         reduce using rule 16
	boolean        reduce using rule 16
	'!'            reduce using rule 16
	'('            reduce using rule 16
	'{'            reduce using rule 16
	'.'            shift, and enter state 56


State 89

	fnApplication -> atom args '!' .                    (rule 17)

	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	let            reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	data           reduce using rule 17
	ty             reduce using rule 17
	')'            reduce using rule 17
	'}'            reduce using rule 17
	','            reduce using rule 17
	%eof           reduce using rule 17


State 90

	expr -> expr . '+' expr                             (rule 34)
	expr -> expr . '-' expr                             (rule 35)
	expr -> expr . '*' expr                             (rule 36)
	expr -> expr . '/' expr                             (rule 37)
	expr -> expr '/' expr .                             (rule 37)

	'+'            reduce using rule 37
	'-'            reduce using rule 37
	'*'            reduce using rule 37
	'/'            reduce using rule 37
	let            reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	data           reduce using rule 37
	ty             reduce using rule 37
	')'            reduce using rule 37
	'}'            reduce using rule 37
	','            reduce using rule 37
	%eof           reduce using rule 37


State 91

	expr -> expr . '+' expr                             (rule 34)
	expr -> expr . '-' expr                             (rule 35)
	expr -> expr . '*' expr                             (rule 36)
	expr -> expr '*' expr .                             (rule 36)
	expr -> expr . '/' expr                             (rule 37)

	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            reduce using rule 36
	'/'            reduce using rule 36
	let            reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	data           reduce using rule 36
	ty             reduce using rule 36
	')'            reduce using rule 36
	'}'            reduce using rule 36
	','            reduce using rule 36
	%eof           reduce using rule 36


State 92

	expr -> expr . '+' expr                             (rule 34)
	expr -> expr . '-' expr                             (rule 35)
	expr -> expr '-' expr .                             (rule 35)
	expr -> expr . '*' expr                             (rule 36)
	expr -> expr . '/' expr                             (rule 37)

	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	let            reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	data           reduce using rule 35
	ty             reduce using rule 35
	')'            reduce using rule 35
	'}'            reduce using rule 35
	','            reduce using rule 35
	%eof           reduce using rule 35


State 93

	expr -> expr . '+' expr                             (rule 34)
	expr -> expr '+' expr .                             (rule 34)
	expr -> expr . '-' expr                             (rule 35)
	expr -> expr . '*' expr                             (rule 36)
	expr -> expr . '/' expr                             (rule 37)

	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	let            reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	data           reduce using rule 34
	ty             reduce using rule 34
	')'            reduce using rule 34
	'}'            reduce using rule 34
	','            reduce using rule 34
	%eof           reduce using rule 34


State 94

	controlFlow -> if expr then . expr else expr        (rule 18)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 105

State 95

	tuple -> '(' expr tupleElems . ')'                  (rule 12)

	')'            shift, and enter state 104


State 96

	atom -> '(' expr ')' .                              (rule 27)

	id             reduce using rule 27
	number         reduce using rule 27
	string         reduce using rule 27
	boolean        reduce using rule 27
	'!'            reduce using rule 27
	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'*'            reduce using rule 27
	'/'            reduce using rule 27
	let            reduce using rule 27
	then           reduce using rule 27
	else           reduce using rule 27
	data           reduce using rule 27
	ty             reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	'{'            reduce using rule 27
	'}'            reduce using rule 27
	','            reduce using rule 27
	'.'            reduce using rule 27
	%eof           reduce using rule 27


State 97

	tupleElems -> ',' . expr                            (rule 10)
	tupleElems -> ',' . expr tupleElems                 (rule 11)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 103

State 98

	record -> '{' pairs '}' .                           (rule 9)

	id             reduce using rule 9
	number         reduce using rule 9
	string         reduce using rule 9
	boolean        reduce using rule 9
	'!'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	let            reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	data           reduce using rule 9
	ty             reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	','            reduce using rule 9
	'.'            reduce using rule 9
	%eof           reduce using rule 9


State 99

	pairs -> identifier ':' . expr ',' pairs            (rule 7)
	pairs -> identifier ':' . expr                      (rule 8)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 102

State 100

	expr -> '\\' params '->' . expr                     (rule 31)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 101

State 101

	expr -> '\\' params '->' expr .                     (rule 31)
	expr -> expr . '+' expr                             (rule 34)
	expr -> expr . '-' expr                             (rule 35)
	expr -> expr . '*' expr                             (rule 36)
	expr -> expr . '/' expr                             (rule 37)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	let            reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	data           reduce using rule 31
	ty             reduce using rule 31
	')'            reduce using rule 31
	'}'            reduce using rule 31
	','            reduce using rule 31
	%eof           reduce using rule 31


State 102

	pairs -> identifier ':' expr . ',' pairs            (rule 7)
	pairs -> identifier ':' expr .                      (rule 8)
	expr -> expr . '+' expr                             (rule 34)
	expr -> expr . '-' expr                             (rule 35)
	expr -> expr . '*' expr                             (rule 36)
	expr -> expr . '/' expr                             (rule 37)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	'}'            reduce using rule 8
	','            shift, and enter state 134


State 103

	tupleElems -> ',' expr .                            (rule 10)
	tupleElems -> ',' expr . tupleElems                 (rule 11)
	expr -> expr . '+' expr                             (rule 34)
	expr -> expr . '-' expr                             (rule 35)
	expr -> expr . '*' expr                             (rule 36)
	expr -> expr . '/' expr                             (rule 37)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	')'            reduce using rule 10
	','            shift, and enter state 97

	tupleElems     goto state 133

State 104

	tuple -> '(' expr tupleElems ')' .                  (rule 12)

	id             reduce using rule 12
	number         reduce using rule 12
	string         reduce using rule 12
	boolean        reduce using rule 12
	'!'            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	let            reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	data           reduce using rule 12
	ty             reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	','            reduce using rule 12
	'.'            reduce using rule 12
	%eof           reduce using rule 12


State 105

	controlFlow -> if expr then expr . else expr        (rule 18)
	expr -> expr . '+' expr                             (rule 34)
	expr -> expr . '-' expr                             (rule 35)
	expr -> expr . '*' expr                             (rule 36)
	expr -> expr . '/' expr                             (rule 37)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	else           shift, and enter state 132


State 106

	typeExpr -> '\\' params '=>' typeExpr .             (rule 62)
	typeExpr -> typeExpr . where tbindings              (rule 65)

	let            reduce using rule 62
	where          shift, and enter state 61
	data           reduce using rule 62
	ty             reduce using rule 62
	')'            reduce using rule 62
	'}'            reduce using rule 62
	','            reduce using rule 62
	'='            reduce using rule 62
	'|'            reduce using rule 62
	'::'           reduce using rule 62
	%eof           reduce using rule 62


State 107

	tpairs -> identifier ':' typeExpr . ',' tpairs      (rule 39)
	tpairs -> identifier ':' typeExpr .                 (rule 40)
	typeExpr -> typeExpr . where tbindings              (rule 65)

	where          shift, and enter state 61
	'}'            reduce using rule 40
	','            shift, and enter state 131


State 108

	ttupleElems -> ',' typeExpr .                       (rule 42)
	ttupleElems -> ',' typeExpr . ttupleElems           (rule 43)
	typeExpr -> typeExpr . where tbindings              (rule 65)

	where          shift, and enter state 61
	')'            reduce using rule 42
	','            shift, and enter state 82

	ttupleElems    goto state 130

State 109

	ttuple -> '(' typeExpr ttupleElems ')' .            (rule 44)

	id             reduce using rule 44
	number         reduce using rule 44
	string         reduce using rule 44
	boolean        reduce using rule 44
	'!'            reduce using rule 44
	let            reduce using rule 44
	where          reduce using rule 44
	data           reduce using rule 44
	ty             reduce using rule 44
	'('            reduce using rule 44
	')'            reduce using rule 44
	'{'            reduce using rule 44
	'}'            reduce using rule 44
	','            reduce using rule 44
	'->'           reduce using rule 44
	'='            reduce using rule 44
	'|'            reduce using rule 44
	'::'           reduce using rule 44
	%eof           reduce using rule 44


State 110

	tbindings -> tbindings ',' . tbinding               (rule 60)

	id             shift, and enter state 6

	identifier     goto state 77
	tbinding       goto state 129

State 111

	tbinding -> identifier implements . typeExpr        (rule 56)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 128

State 112

	tbinding -> identifier '|->' . typeExpr             (rule 57)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 127

State 113

	tbinding -> identifier '=' . typeExpr               (rule 55)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 126

State 114

	tbinding -> identifier '|' . typeExpr               (rule 58)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 125

State 115

	dec -> ty identifier kindAnnotation '=' . typeExpr    (rule 77)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 124

State 116

	kindExpr -> kindExpr . '->' kindExpr                (rule 68)
	kindAnnotation -> '::' kindExpr .                   (rule 71)

	'->'           shift, and enter state 64
	'='            reduce using rule 71


State 117

	dec -> data identifier kindAnnotation '=' . dataExprs    (rule 76)

	id             shift, and enter state 6

	identifier     goto state 121
	dataExpr       goto state 122
	dataExprs      goto state 123

State 118

	typeExpr -> typeExpr . where tbindings              (rule 65)
	typeAnnotation -> ':' typeExpr .                    (rule 67)

	where          shift, and enter state 61
	'='            reduce using rule 67
	'::'           reduce using rule 67


State 119

	dec -> let identifier typeAnnotation kindAnnotation . '=' expr    (rule 75)

	'='            shift, and enter state 120


State 120

	dec -> let identifier typeAnnotation kindAnnotation '=' . expr    (rule 75)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 140

State 121

	dataExpr -> identifier . ':' typeExpr               (rule 72)

	':'            shift, and enter state 139


State 122

	dataExprs -> dataExpr .                             (rule 73)

	let            reduce using rule 73
	data           reduce using rule 73
	ty             reduce using rule 73
	'|'            reduce using rule 73
	%eof           reduce using rule 73


State 123

	dataExprs -> dataExprs . '|' dataExpr               (rule 74)
	dec -> data identifier kindAnnotation '=' dataExprs .    (rule 76)

	let            reduce using rule 76
	data           reduce using rule 76
	ty             reduce using rule 76
	'|'            shift, and enter state 138
	%eof           reduce using rule 76


State 124

	typeExpr -> typeExpr . where tbindings              (rule 65)
	dec -> ty identifier kindAnnotation '=' typeExpr .    (rule 77)

	let            reduce using rule 77
	where          shift, and enter state 61
	data           reduce using rule 77
	ty             reduce using rule 77
	%eof           reduce using rule 77


State 125

	tbinding -> identifier '|' typeExpr .               (rule 58)
	typeExpr -> typeExpr . where tbindings              (rule 65)

	let            reduce using rule 58
	where          shift, and enter state 61
	data           reduce using rule 58
	ty             reduce using rule 58
	')'            reduce using rule 58
	'}'            reduce using rule 58
	','            reduce using rule 58
	'='            reduce using rule 58
	'|'            reduce using rule 58
	'::'           reduce using rule 58
	%eof           reduce using rule 58


State 126

	tbinding -> identifier '=' typeExpr .               (rule 55)
	typeExpr -> typeExpr . where tbindings              (rule 65)

	let            reduce using rule 55
	where          shift, and enter state 61
	data           reduce using rule 55
	ty             reduce using rule 55
	')'            reduce using rule 55
	'}'            reduce using rule 55
	','            reduce using rule 55
	'='            reduce using rule 55
	'|'            reduce using rule 55
	'::'           reduce using rule 55
	%eof           reduce using rule 55


State 127

	tbinding -> identifier '|->' typeExpr .             (rule 57)
	typeExpr -> typeExpr . where tbindings              (rule 65)

	let            reduce using rule 57
	where          shift, and enter state 61
	data           reduce using rule 57
	ty             reduce using rule 57
	')'            reduce using rule 57
	'}'            reduce using rule 57
	','            reduce using rule 57
	'='            reduce using rule 57
	'|'            reduce using rule 57
	'::'           reduce using rule 57
	%eof           reduce using rule 57


State 128

	tbinding -> identifier implements typeExpr .        (rule 56)
	typeExpr -> typeExpr . where tbindings              (rule 65)

	let            reduce using rule 56
	where          shift, and enter state 61
	data           reduce using rule 56
	ty             reduce using rule 56
	')'            reduce using rule 56
	'}'            reduce using rule 56
	','            reduce using rule 56
	'='            reduce using rule 56
	'|'            reduce using rule 56
	'::'           reduce using rule 56
	%eof           reduce using rule 56


State 129

	tbindings -> tbindings ',' tbinding .               (rule 60)

	let            reduce using rule 60
	where          reduce using rule 60
	data           reduce using rule 60
	ty             reduce using rule 60
	')'            reduce using rule 60
	'}'            reduce using rule 60
	','            reduce using rule 60
	'='            reduce using rule 60
	'|'            reduce using rule 60
	'::'           reduce using rule 60
	%eof           reduce using rule 60


State 130

	ttupleElems -> ',' typeExpr ttupleElems .           (rule 43)

	')'            reduce using rule 43


State 131

	tpairs -> identifier ':' typeExpr ',' . tpairs      (rule 39)

	id             shift, and enter state 6
	'}'            reduce using rule 38

	identifier     goto state 58
	tpairs         goto state 137

State 132

	controlFlow -> if expr then expr else . expr        (rule 18)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 136

State 133

	tupleElems -> ',' expr tupleElems .                 (rule 11)

	')'            reduce using rule 11


State 134

	pairs -> identifier ':' expr ',' . pairs            (rule 7)

	id             shift, and enter state 6
	'}'            reduce using rule 6

	identifier     goto state 47
	pairs          goto state 135

State 135

	pairs -> identifier ':' expr ',' pairs .            (rule 7)

	'}'            reduce using rule 7


State 136

	controlFlow -> if expr then expr else expr .        (rule 18)
	expr -> expr . '+' expr                             (rule 34)
	expr -> expr . '-' expr                             (rule 35)
	expr -> expr . '*' expr                             (rule 36)
	expr -> expr . '/' expr                             (rule 37)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	let            reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	data           reduce using rule 18
	ty             reduce using rule 18
	')'            reduce using rule 18
	'}'            reduce using rule 18
	','            reduce using rule 18
	%eof           reduce using rule 18


State 137

	tpairs -> identifier ':' typeExpr ',' tpairs .      (rule 39)

	'}'            reduce using rule 39


State 138

	dataExprs -> dataExprs '|' . dataExpr               (rule 74)

	id             shift, and enter state 6

	identifier     goto state 121
	dataExpr       goto state 142

State 139

	dataExpr -> identifier ':' . typeExpr               (rule 72)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 141

State 140

	expr -> expr . '+' expr                             (rule 34)
	expr -> expr . '-' expr                             (rule 35)
	expr -> expr . '*' expr                             (rule 36)
	expr -> expr . '/' expr                             (rule 37)
	dec -> let identifier typeAnnotation kindAnnotation '=' expr .    (rule 75)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	let            reduce using rule 75
	data           reduce using rule 75
	ty             reduce using rule 75
	%eof           reduce using rule 75


State 141

	typeExpr -> typeExpr . where tbindings              (rule 65)
	dataExpr -> identifier ':' typeExpr .               (rule 72)

	let            reduce using rule 72
	where          shift, and enter state 61
	data           reduce using rule 72
	ty             reduce using rule 72
	'|'            reduce using rule 72
	%eof           reduce using rule 72


State 142

	dataExprs -> dataExprs '|' dataExpr .               (rule 74)

	let            reduce using rule 74
	data           reduce using rule 74
	ty             reduce using rule 74
	'|'            reduce using rule 74
	%eof           reduce using rule 74


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 81
Number of terminals: 60
Number of non-terminals: 36
Number of states: 143
