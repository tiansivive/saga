-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from ./src/Saga/Parser/ParserHM.y
-----------------------------------------------------------------------------


rule 27 is unused

terminal '==' is unused
terminal '!=' is unused
terminal '<' is unused
terminal '<=' is unused
terminal '>' is unused
terminal '>=' is unused
terminal '||' is unused
terminal '&&' is unused
terminal op is unused
terminal in is unused
terminal with is unused
terminal match is unused
terminal return is unused
terminal alias is unused
terminal kind is unused
terminal forall is unused
terminal exists is unused
terminal proof is unused
terminal infer is unused
terminal protocol is unused
terminal interface is unused
terminal instance is unused
terminal module is unused
terminal import is unused
terminal '[' is unused
terminal ']' is unused
terminal '<-' is unused
terminal newline is unused
terminal eof is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseSagaScript -> script                   (0)
	%start_parseSagaExpr -> expr                       (1)
	%start_parseSagaType -> typeExpr                   (2)
	%start_parseSagaKind -> kindExpr                   (3)
	%start_parseSagaDec -> dec                         (4)
	identifier -> id                                   (5)
	pairs ->                                           (6)
	pairs -> identifier ':' expr ',' pairs             (7)
	pairs -> identifier ':' expr                       (8)
	record -> '{' pairs '}'                            (9)
	tupleElems -> ',' expr                             (10)
	tupleElems -> ',' expr tupleElems                  (11)
	tuple -> '(' expr tupleElems ')'                   (12)
	params ->                                          (13)
	params -> params identifier                        (14)
	args ->                                            (15)
	args -> args atom                                  (16)
	fnApplication -> atom args '!'                     (17)
	controlFlow -> if expr then expr else expr         (18)
	term -> number                                     (19)
	term -> boolean                                    (20)
	term -> string                                     (21)
	atom -> identifier                                 (22)
	atom -> term                                       (23)
	atom -> tuple                                      (24)
	atom -> record                                     (25)
	atom -> '(' expr ')'                               (26)
	assignment -> identifier '=' expr                  (27)
	binding -> identifier '=' expr                     (28)
	bindings -> binding                                (29)
	bindings -> bindings ',' binding                   (30)
	expr -> controlFlow                                (31)
	expr -> fnApplication                              (32)
	expr -> '\\' params '->' expr                      (33)
	expr -> atom                                       (34)
	expr -> '.' atom                                   (35)
	expr -> expr '.' identifier                        (36)
	expr -> expr '+' expr                              (37)
	expr -> expr '-' expr                              (38)
	expr -> expr '*' expr                              (39)
	expr -> expr '/' expr                              (40)
	tpairs ->                                          (41)
	tpairs -> identifier ':' typeExpr ',' tpairs       (42)
	tpairs -> identifier ':' typeExpr                  (43)
	trecord -> '{' tpairs '}'                          (44)
	ttupleElems -> ',' typeExpr                        (45)
	ttupleElems -> ',' typeExpr ttupleElems            (46)
	ttuple -> '(' typeExpr ttupleElems ')'             (47)
	type -> number                                     (48)
	type -> boolean                                    (49)
	type -> string                                     (50)
	type -> ttuple                                     (51)
	type -> trecord                                    (52)
	typeAtom -> type                                   (53)
	typeAtom -> identifier                             (54)
	typeAtom -> '(' typeExpr ')'                       (55)
	typeArgs ->                                        (56)
	typeArgs -> typeArgs typeAtom                      (57)
	tbinding -> identifier '=' typeExpr                (58)
	tbinding -> identifier implements typeExpr         (59)
	tbinding -> identifier '|->' typeExpr              (60)
	tbinding -> identifier '|' typeExpr                (61)
	tbindings -> tbinding                              (62)
	tbindings -> tbindings ';' tbinding                (63)
	typeExpr -> typeAtom '->' typeExpr                 (64)
	typeExpr -> '\\' params '=>' typeExpr              (65)
	typeExpr -> typeAtom typeArgs '!'                  (66)
	typeExpr -> typeAtom                               (67)
	typeExpr -> identifier ':' typeExpr                (68)
	typeAnnotation ->                                  (69)
	typeAnnotation -> ':' typeExpr                     (70)
	typeAnnotation -> ':' typeExpr where tbindings     (71)
	kindExpr -> kindExpr '->' kindExpr                 (72)
	kindExpr -> identifier                             (73)
	kindAnnotation ->                                  (74)
	kindAnnotation -> '::' kindExpr                    (75)
	dataExpr -> identifier ':' typeExpr                (76)
	dataExprs -> dataExpr                              (77)
	dataExprs -> dataExprs '|' dataExpr                (78)
	dec -> let identifier typeAnnotation kindAnnotation '=' expr   (79)
	dec -> let identifier typeAnnotation kindAnnotation '=' expr where bindings   (80)
	dec -> data identifier kindAnnotation '=' dataExprs   (81)
	dec -> data identifier kindAnnotation '=' dataExprs where tbindings   (82)
	dec -> ty identifier kindAnnotation '=' typeExpr   (83)
	dec -> ty identifier kindAnnotation '=' typeExpr where tbindings   (84)
	declarations -> dec                                (85)
	declarations -> declarations dec                   (86)
	script -> declarations                             (87)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	id             { L.RangedToken (T.Id _) _ }
	number         { L.RangedToken (T.Number _) _ }
	string         { L.RangedToken (T.String _) _ }
	boolean        { L.RangedToken (T.Boolean _) _ }
	'!'            { L.RangedToken (T.Operator "!") _ }
	'+'            { L.RangedToken (T.Operator "+") _ }
	'-'            { L.RangedToken (T.Operator "-") _ }
	'*'            { L.RangedToken (T.Operator "*") _ }
	'/'            { L.RangedToken (T.Operator "/") _ }
	'=='           { L.RangedToken (T.Operator "==") _ }
	'!='           { L.RangedToken (T.Operator "!=") _ }
	'<'            { L.RangedToken (T.Operator "<") _ }
	'<='           { L.RangedToken (T.Operator "<=") _ }
	'>'            { L.RangedToken (T.Operator ">") _ }
	'>='           { L.RangedToken (T.Operator ">=") _ }
	'||'           { L.RangedToken (T.Operator "||") _ }
	'&&'           { L.RangedToken (T.Operator "&&") _ }
	op             { L.RangedToken (T.Operator _) _ }
	let            { L.RangedToken T.Let _ }
	in             { L.RangedToken T.In _ }
	where          { L.RangedToken T.Where _ }
	with           { L.RangedToken T.With _ }
	if             { L.RangedToken T.If _ }
	then           { L.RangedToken T.Then _ }
	else           { L.RangedToken T.Else _ }
	match          { L.RangedToken T.Match _ }
	return         { L.RangedToken T.Return _ }
	data           { L.RangedToken T.Data _ }
	ty             { L.RangedToken T.Type _ }
	alias          { L.RangedToken T.Alias _ }
	kind           { L.RangedToken T.Kind _ }
	forall         { L.RangedToken T.Forall _ }
	exists         { L.RangedToken T.Exists _ }
	proof          { L.RangedToken T.Proof _ }
	infer          { L.RangedToken T.Infer _ }
	protocol       { L.RangedToken T.Protocol _ }
	interface      { L.RangedToken T.Interface _ }
	instance       { L.RangedToken T.Instance _ }
	implements     { L.RangedToken T.Implements _ }
	module         { L.RangedToken T.Module _ }
	import         { L.RangedToken T.Import _ }
	'('            { L.RangedToken T.LParen _ }
	')'            { L.RangedToken T.RParen _ }
	'['            { L.RangedToken T.LBrack _ }
	']'            { L.RangedToken T.RBrack _ }
	'{'            { L.RangedToken T.LCurly _ }
	'}'            { L.RangedToken T.RCurly _ }
	':'            { L.RangedToken T.Colon _ }
	';'            { L.RangedToken T.SemiColon _ }
	','            { L.RangedToken T.Comma _ }
	'->'           { L.RangedToken T.Arrow _ }
	'<-'           { L.RangedToken T.BackArrow _ }
	'=>'           { L.RangedToken T.FatArrow _ }
	'|->'          { L.RangedToken T.PipeArrow _ }
	'='            { L.RangedToken T.Equals _ }
	'|'            { L.RangedToken T.Pipe _ }
	'.'            { L.RangedToken T.Dot _ }
	'::'           { L.RangedToken T.Section _ }
	'\\'           { L.RangedToken T.BackSlash _ }
	newline        { L.RangedToken T.Newline _ }
	eof            { L.RangedToken T.EOF _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseSagaScript rule  0
	%start_parseSagaExpr rule  1
	%start_parseSagaType rule  2
	%start_parseSagaKind rule  3
	%start_parseSagaDec rule  4
	identifier      rule  5
	pairs           rules 6, 7, 8
	record          rule  9
	tupleElems      rules 10, 11
	tuple           rule  12
	params          rules 13, 14
	args            rules 15, 16
	fnApplication   rule  17
	controlFlow     rule  18
	term            rules 19, 20, 21
	atom            rules 22, 23, 24, 25, 26
	assignment      rule  27
	binding         rule  28
	bindings        rules 29, 30
	expr            rules 31, 32, 33, 34, 35, 36, 37, 38, 39, 40
	tpairs          rules 41, 42, 43
	trecord         rule  44
	ttupleElems     rules 45, 46
	ttuple          rule  47
	type            rules 48, 49, 50, 51, 52
	typeAtom        rules 53, 54, 55
	typeArgs        rules 56, 57
	tbinding        rules 58, 59, 60, 61
	tbindings       rules 62, 63
	typeExpr        rules 64, 65, 66, 67, 68
	typeAnnotation  rules 69, 70, 71
	kindExpr        rules 72, 73
	kindAnnotation  rules 74, 75
	dataExpr        rule  76
	dataExprs       rules 77, 78
	dec             rules 79, 80, 81, 82, 83, 84
	declarations    rules 85, 86
	script          rule  87

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseSagaScript -> . script                  (rule 0)

	let            shift, and enter state 8
	data           shift, and enter state 9
	ty             shift, and enter state 10

	dec            goto state 41
	declarations   goto state 42
	script         goto state 43

State 1

	%start_parseSagaExpr -> . expr                      (rule 1)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 32

State 2

	%start_parseSagaType -> . typeExpr                  (rule 2)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 18

State 3

	%start_parseSagaKind -> . kindExpr                  (rule 3)

	id             shift, and enter state 6

	identifier     goto state 11
	kindExpr       goto state 12

State 4

	%start_parseSagaDec -> . dec                        (rule 4)

	let            shift, and enter state 8
	data           shift, and enter state 9
	ty             shift, and enter state 10

	dec            goto state 7

State 5

	identifier -> . id                                  (rule 5)

	id             shift, and enter state 6


State 6

	identifier -> id .                                  (rule 5)

	id             reduce using rule 5
	number         reduce using rule 5
	string         reduce using rule 5
	boolean        reduce using rule 5
	'!'            reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	let            reduce using rule 5
	where          reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	data           reduce using rule 5
	ty             reduce using rule 5
	implements     reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'{'            reduce using rule 5
	'}'            reduce using rule 5
	':'            reduce using rule 5
	';'            reduce using rule 5
	','            reduce using rule 5
	'->'           reduce using rule 5
	'=>'           reduce using rule 5
	'|->'          reduce using rule 5
	'='            reduce using rule 5
	'|'            reduce using rule 5
	'.'            reduce using rule 5
	'::'           reduce using rule 5
	%eof           reduce using rule 5


State 7

	%start_parseSagaDec -> dec .                        (rule 4)

	%eof           accept


State 8

	dec -> let . identifier typeAnnotation kindAnnotation '=' expr    (rule 79)
	dec -> let . identifier typeAnnotation kindAnnotation '=' expr where bindings    (rule 80)

	id             shift, and enter state 6

	identifier     goto state 67

State 9

	dec -> data . identifier kindAnnotation '=' dataExprs    (rule 81)
	dec -> data . identifier kindAnnotation '=' dataExprs where tbindings    (rule 82)

	id             shift, and enter state 6

	identifier     goto state 66

State 10

	dec -> ty . identifier kindAnnotation '=' typeExpr    (rule 83)
	dec -> ty . identifier kindAnnotation '=' typeExpr where tbindings    (rule 84)

	id             shift, and enter state 6

	identifier     goto state 65

State 11

	kindExpr -> identifier .                            (rule 73)

	'->'           reduce using rule 73
	'='            reduce using rule 73
	%eof           reduce using rule 73


State 12

	%start_parseSagaKind -> kindExpr .                  (rule 3)
	kindExpr -> kindExpr . '->' kindExpr                (rule 72)

	'->'           shift, and enter state 64
	%eof           accept


State 13

	typeAtom -> identifier .                            (rule 54)
	typeExpr -> identifier . ':' typeExpr               (rule 68)

	id             reduce using rule 54
	number         reduce using rule 54
	string         reduce using rule 54
	boolean        reduce using rule 54
	'!'            reduce using rule 54
	let            reduce using rule 54
	where          reduce using rule 54
	data           reduce using rule 54
	ty             reduce using rule 54
	'('            reduce using rule 54
	')'            reduce using rule 54
	'{'            reduce using rule 54
	'}'            reduce using rule 54
	':'            shift, and enter state 63
	';'            reduce using rule 54
	','            reduce using rule 54
	'->'           reduce using rule 54
	'='            reduce using rule 54
	'|'            reduce using rule 54
	'::'           reduce using rule 54
	%eof           reduce using rule 54


State 14

	type -> trecord .                                   (rule 52)

	id             reduce using rule 52
	number         reduce using rule 52
	string         reduce using rule 52
	boolean        reduce using rule 52
	'!'            reduce using rule 52
	let            reduce using rule 52
	where          reduce using rule 52
	data           reduce using rule 52
	ty             reduce using rule 52
	'('            reduce using rule 52
	')'            reduce using rule 52
	'{'            reduce using rule 52
	'}'            reduce using rule 52
	';'            reduce using rule 52
	','            reduce using rule 52
	'->'           reduce using rule 52
	'='            reduce using rule 52
	'|'            reduce using rule 52
	'::'           reduce using rule 52
	%eof           reduce using rule 52


State 15

	type -> ttuple .                                    (rule 51)

	id             reduce using rule 51
	number         reduce using rule 51
	string         reduce using rule 51
	boolean        reduce using rule 51
	'!'            reduce using rule 51
	let            reduce using rule 51
	where          reduce using rule 51
	data           reduce using rule 51
	ty             reduce using rule 51
	'('            reduce using rule 51
	')'            reduce using rule 51
	'{'            reduce using rule 51
	'}'            reduce using rule 51
	';'            reduce using rule 51
	','            reduce using rule 51
	'->'           reduce using rule 51
	'='            reduce using rule 51
	'|'            reduce using rule 51
	'::'           reduce using rule 51
	%eof           reduce using rule 51


State 16

	typeAtom -> type .                                  (rule 53)

	id             reduce using rule 53
	number         reduce using rule 53
	string         reduce using rule 53
	boolean        reduce using rule 53
	'!'            reduce using rule 53
	let            reduce using rule 53
	where          reduce using rule 53
	data           reduce using rule 53
	ty             reduce using rule 53
	'('            reduce using rule 53
	')'            reduce using rule 53
	'{'            reduce using rule 53
	'}'            reduce using rule 53
	';'            reduce using rule 53
	','            reduce using rule 53
	'->'           reduce using rule 53
	'='            reduce using rule 53
	'|'            reduce using rule 53
	'::'           reduce using rule 53
	%eof           reduce using rule 53


State 17

	typeExpr -> typeAtom . '->' typeExpr                (rule 64)
	typeExpr -> typeAtom . typeArgs '!'                 (rule 66)
	typeExpr -> typeAtom .                              (rule 67)

	id             reduce using rule 56
	number         reduce using rule 56
	string         reduce using rule 56
	boolean        reduce using rule 56
	'!'            reduce using rule 56
	let            reduce using rule 67
	where          reduce using rule 67
	data           reduce using rule 67
	ty             reduce using rule 67
	'('            reduce using rule 56
	')'            reduce using rule 67
	'{'            reduce using rule 56
	'}'            reduce using rule 67
	';'            reduce using rule 67
	','            reduce using rule 67
	'->'           shift, and enter state 62
	'='            reduce using rule 67
	'|'            reduce using rule 67
	'::'           reduce using rule 67
	%eof           reduce using rule 67

	typeArgs       goto state 61

State 18

	%start_parseSagaType -> typeExpr .                  (rule 2)

	%eof           accept


State 19

	type -> number .                                    (rule 48)

	id             reduce using rule 48
	number         reduce using rule 48
	string         reduce using rule 48
	boolean        reduce using rule 48
	'!'            reduce using rule 48
	let            reduce using rule 48
	where          reduce using rule 48
	data           reduce using rule 48
	ty             reduce using rule 48
	'('            reduce using rule 48
	')'            reduce using rule 48
	'{'            reduce using rule 48
	'}'            reduce using rule 48
	';'            reduce using rule 48
	','            reduce using rule 48
	'->'           reduce using rule 48
	'='            reduce using rule 48
	'|'            reduce using rule 48
	'::'           reduce using rule 48
	%eof           reduce using rule 48


State 20

	type -> string .                                    (rule 50)

	id             reduce using rule 50
	number         reduce using rule 50
	string         reduce using rule 50
	boolean        reduce using rule 50
	'!'            reduce using rule 50
	let            reduce using rule 50
	where          reduce using rule 50
	data           reduce using rule 50
	ty             reduce using rule 50
	'('            reduce using rule 50
	')'            reduce using rule 50
	'{'            reduce using rule 50
	'}'            reduce using rule 50
	';'            reduce using rule 50
	','            reduce using rule 50
	'->'           reduce using rule 50
	'='            reduce using rule 50
	'|'            reduce using rule 50
	'::'           reduce using rule 50
	%eof           reduce using rule 50


State 21

	type -> boolean .                                   (rule 49)

	id             reduce using rule 49
	number         reduce using rule 49
	string         reduce using rule 49
	boolean        reduce using rule 49
	'!'            reduce using rule 49
	let            reduce using rule 49
	where          reduce using rule 49
	data           reduce using rule 49
	ty             reduce using rule 49
	'('            reduce using rule 49
	')'            reduce using rule 49
	'{'            reduce using rule 49
	'}'            reduce using rule 49
	';'            reduce using rule 49
	','            reduce using rule 49
	'->'           reduce using rule 49
	'='            reduce using rule 49
	'|'            reduce using rule 49
	'::'           reduce using rule 49
	%eof           reduce using rule 49


State 22

	ttuple -> '(' . typeExpr ttupleElems ')'            (rule 47)
	typeAtom -> '(' . typeExpr ')'                      (rule 55)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 60

State 23

	trecord -> '{' . tpairs '}'                         (rule 44)

	id             shift, and enter state 6
	'}'            reduce using rule 41

	identifier     goto state 58
	tpairs         goto state 59

State 24

	typeExpr -> '\\' . params '=>' typeExpr             (rule 65)

	id             reduce using rule 13
	'=>'           reduce using rule 13

	params         goto state 57

State 25

	atom -> identifier .                                (rule 22)

	id             reduce using rule 22
	number         reduce using rule 22
	string         reduce using rule 22
	boolean        reduce using rule 22
	'!'            reduce using rule 22
	'+'            reduce using rule 22
	'-'            reduce using rule 22
	'*'            reduce using rule 22
	'/'            reduce using rule 22
	let            reduce using rule 22
	where          reduce using rule 22
	then           reduce using rule 22
	else           reduce using rule 22
	data           reduce using rule 22
	ty             reduce using rule 22
	'('            reduce using rule 22
	')'            reduce using rule 22
	'{'            reduce using rule 22
	'}'            reduce using rule 22
	','            reduce using rule 22
	'.'            reduce using rule 22
	%eof           reduce using rule 22


State 26

	atom -> record .                                    (rule 25)

	id             reduce using rule 25
	number         reduce using rule 25
	string         reduce using rule 25
	boolean        reduce using rule 25
	'!'            reduce using rule 25
	'+'            reduce using rule 25
	'-'            reduce using rule 25
	'*'            reduce using rule 25
	'/'            reduce using rule 25
	let            reduce using rule 25
	where          reduce using rule 25
	then           reduce using rule 25
	else           reduce using rule 25
	data           reduce using rule 25
	ty             reduce using rule 25
	'('            reduce using rule 25
	')'            reduce using rule 25
	'{'            reduce using rule 25
	'}'            reduce using rule 25
	','            reduce using rule 25
	'.'            reduce using rule 25
	%eof           reduce using rule 25


State 27

	atom -> tuple .                                     (rule 24)

	id             reduce using rule 24
	number         reduce using rule 24
	string         reduce using rule 24
	boolean        reduce using rule 24
	'!'            reduce using rule 24
	'+'            reduce using rule 24
	'-'            reduce using rule 24
	'*'            reduce using rule 24
	'/'            reduce using rule 24
	let            reduce using rule 24
	where          reduce using rule 24
	then           reduce using rule 24
	else           reduce using rule 24
	data           reduce using rule 24
	ty             reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'{'            reduce using rule 24
	'}'            reduce using rule 24
	','            reduce using rule 24
	'.'            reduce using rule 24
	%eof           reduce using rule 24


State 28

	expr -> fnApplication .                             (rule 32)

	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'*'            reduce using rule 32
	'/'            reduce using rule 32
	let            reduce using rule 32
	where          reduce using rule 32
	then           reduce using rule 32
	else           reduce using rule 32
	data           reduce using rule 32
	ty             reduce using rule 32
	')'            reduce using rule 32
	'}'            reduce using rule 32
	','            reduce using rule 32
	'.'            reduce using rule 32
	%eof           reduce using rule 32


State 29

	expr -> controlFlow .                               (rule 31)

	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'*'            reduce using rule 31
	'/'            reduce using rule 31
	let            reduce using rule 31
	where          reduce using rule 31
	then           reduce using rule 31
	else           reduce using rule 31
	data           reduce using rule 31
	ty             reduce using rule 31
	')'            reduce using rule 31
	'}'            reduce using rule 31
	','            reduce using rule 31
	'.'            reduce using rule 31
	%eof           reduce using rule 31


State 30

	atom -> term .                                      (rule 23)

	id             reduce using rule 23
	number         reduce using rule 23
	string         reduce using rule 23
	boolean        reduce using rule 23
	'!'            reduce using rule 23
	'+'            reduce using rule 23
	'-'            reduce using rule 23
	'*'            reduce using rule 23
	'/'            reduce using rule 23
	let            reduce using rule 23
	where          reduce using rule 23
	then           reduce using rule 23
	else           reduce using rule 23
	data           reduce using rule 23
	ty             reduce using rule 23
	'('            reduce using rule 23
	')'            reduce using rule 23
	'{'            reduce using rule 23
	'}'            reduce using rule 23
	','            reduce using rule 23
	'.'            reduce using rule 23
	%eof           reduce using rule 23


State 31

	fnApplication -> atom . args '!'                    (rule 17)
	expr -> atom .                                      (rule 34)

	id             reduce using rule 15
	number         reduce using rule 15
	string         reduce using rule 15
	boolean        reduce using rule 15
	'!'            reduce using rule 15
	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	let            reduce using rule 34
	where          reduce using rule 34
	then           reduce using rule 34
	else           reduce using rule 34
	data           reduce using rule 34
	ty             reduce using rule 34
	'('            reduce using rule 15
	')'            reduce using rule 34
	'{'            reduce using rule 15
	'}'            reduce using rule 34
	','            reduce using rule 34
	'.'            reduce using rule 34
	%eof           reduce using rule 34

	args           goto state 56

State 32

	%start_parseSagaExpr -> expr .                      (rule 1)
	expr -> expr . '.' identifier                       (rule 36)
	expr -> expr . '+' expr                             (rule 37)
	expr -> expr . '-' expr                             (rule 38)
	expr -> expr . '*' expr                             (rule 39)
	expr -> expr . '/' expr                             (rule 40)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	'.'            shift, and enter state 55
	%eof           accept


State 33

	term -> number .                                    (rule 19)

	id             reduce using rule 19
	number         reduce using rule 19
	string         reduce using rule 19
	boolean        reduce using rule 19
	'!'            reduce using rule 19
	'+'            reduce using rule 19
	'-'            reduce using rule 19
	'*'            reduce using rule 19
	'/'            reduce using rule 19
	let            reduce using rule 19
	where          reduce using rule 19
	then           reduce using rule 19
	else           reduce using rule 19
	data           reduce using rule 19
	ty             reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'{'            reduce using rule 19
	'}'            reduce using rule 19
	','            reduce using rule 19
	'.'            reduce using rule 19
	%eof           reduce using rule 19


State 34

	term -> string .                                    (rule 21)

	id             reduce using rule 21
	number         reduce using rule 21
	string         reduce using rule 21
	boolean        reduce using rule 21
	'!'            reduce using rule 21
	'+'            reduce using rule 21
	'-'            reduce using rule 21
	'*'            reduce using rule 21
	'/'            reduce using rule 21
	let            reduce using rule 21
	where          reduce using rule 21
	then           reduce using rule 21
	else           reduce using rule 21
	data           reduce using rule 21
	ty             reduce using rule 21
	'('            reduce using rule 21
	')'            reduce using rule 21
	'{'            reduce using rule 21
	'}'            reduce using rule 21
	','            reduce using rule 21
	'.'            reduce using rule 21
	%eof           reduce using rule 21


State 35

	term -> boolean .                                   (rule 20)

	id             reduce using rule 20
	number         reduce using rule 20
	string         reduce using rule 20
	boolean        reduce using rule 20
	'!'            reduce using rule 20
	'+'            reduce using rule 20
	'-'            reduce using rule 20
	'*'            reduce using rule 20
	'/'            reduce using rule 20
	let            reduce using rule 20
	where          reduce using rule 20
	then           reduce using rule 20
	else           reduce using rule 20
	data           reduce using rule 20
	ty             reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'{'            reduce using rule 20
	'}'            reduce using rule 20
	','            reduce using rule 20
	'.'            reduce using rule 20
	%eof           reduce using rule 20


State 36

	controlFlow -> if . expr then expr else expr        (rule 18)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 50

State 37

	tuple -> '(' . expr tupleElems ')'                  (rule 12)
	atom -> '(' . expr ')'                              (rule 26)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 49

State 38

	record -> '{' . pairs '}'                           (rule 9)

	id             shift, and enter state 6
	'}'            reduce using rule 6

	identifier     goto state 47
	pairs          goto state 48

State 39

	expr -> '.' . atom                                  (rule 35)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	'('            shift, and enter state 37
	'{'            shift, and enter state 38

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	term           goto state 30
	atom           goto state 46

State 40

	expr -> '\\' . params '->' expr                     (rule 33)

	id             reduce using rule 13
	'->'           reduce using rule 13

	params         goto state 45

State 41

	declarations -> dec .                               (rule 85)

	let            reduce using rule 85
	data           reduce using rule 85
	ty             reduce using rule 85
	%eof           reduce using rule 85


State 42

	declarations -> declarations . dec                  (rule 86)
	script -> declarations .                            (rule 87)

	let            shift, and enter state 8
	data           shift, and enter state 9
	ty             shift, and enter state 10
	%eof           reduce using rule 87

	dec            goto state 44

State 43

	%start_parseSagaScript -> script .                  (rule 0)

	%eof           accept


State 44

	declarations -> declarations dec .                  (rule 86)

	let            reduce using rule 86
	data           reduce using rule 86
	ty             reduce using rule 86
	%eof           reduce using rule 86


State 45

	params -> params . identifier                       (rule 14)
	expr -> '\\' params . '->' expr                     (rule 33)

	id             shift, and enter state 6
	'->'           shift, and enter state 99

	identifier     goto state 84

State 46

	expr -> '.' atom .                                  (rule 35)

	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	let            reduce using rule 35
	where          reduce using rule 35
	then           reduce using rule 35
	else           reduce using rule 35
	data           reduce using rule 35
	ty             reduce using rule 35
	')'            reduce using rule 35
	'}'            reduce using rule 35
	','            reduce using rule 35
	'.'            reduce using rule 35
	%eof           reduce using rule 35


State 47

	pairs -> identifier . ':' expr ',' pairs            (rule 7)
	pairs -> identifier . ':' expr                      (rule 8)

	':'            shift, and enter state 98


State 48

	record -> '{' pairs . '}'                           (rule 9)

	'}'            shift, and enter state 97


State 49

	tuple -> '(' expr . tupleElems ')'                  (rule 12)
	atom -> '(' expr . ')'                              (rule 26)
	expr -> expr . '.' identifier                       (rule 36)
	expr -> expr . '+' expr                             (rule 37)
	expr -> expr . '-' expr                             (rule 38)
	expr -> expr . '*' expr                             (rule 39)
	expr -> expr . '/' expr                             (rule 40)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	')'            shift, and enter state 95
	','            shift, and enter state 96
	'.'            shift, and enter state 55

	tupleElems     goto state 94

State 50

	controlFlow -> if expr . then expr else expr        (rule 18)
	expr -> expr . '.' identifier                       (rule 36)
	expr -> expr . '+' expr                             (rule 37)
	expr -> expr . '-' expr                             (rule 38)
	expr -> expr . '*' expr                             (rule 39)
	expr -> expr . '/' expr                             (rule 40)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	then           shift, and enter state 93
	'.'            shift, and enter state 55


State 51

	expr -> expr '+' . expr                             (rule 37)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 92

State 52

	expr -> expr '-' . expr                             (rule 38)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 91

State 53

	expr -> expr '*' . expr                             (rule 39)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 90

State 54

	expr -> expr '/' . expr                             (rule 40)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 89

State 55

	expr -> expr '.' . identifier                       (rule 36)

	id             shift, and enter state 6

	identifier     goto state 88

State 56

	args -> args . atom                                 (rule 16)
	fnApplication -> atom args . '!'                    (rule 17)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	'!'            shift, and enter state 87
	'('            shift, and enter state 37
	'{'            shift, and enter state 38

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	term           goto state 30
	atom           goto state 86

State 57

	params -> params . identifier                       (rule 14)
	typeExpr -> '\\' params . '=>' typeExpr             (rule 65)

	id             shift, and enter state 6
	'=>'           shift, and enter state 85

	identifier     goto state 84

State 58

	tpairs -> identifier . ':' typeExpr ',' tpairs      (rule 42)
	tpairs -> identifier . ':' typeExpr                 (rule 43)

	':'            shift, and enter state 83


State 59

	trecord -> '{' tpairs . '}'                         (rule 44)

	'}'            shift, and enter state 82


State 60

	ttuple -> '(' typeExpr . ttupleElems ')'            (rule 47)
	typeAtom -> '(' typeExpr . ')'                      (rule 55)

	')'            shift, and enter state 80
	','            shift, and enter state 81

	ttupleElems    goto state 79

State 61

	typeArgs -> typeArgs . typeAtom                     (rule 57)
	typeExpr -> typeAtom typeArgs . '!'                 (rule 66)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'!'            shift, and enter state 78
	'('            shift, and enter state 22
	'{'            shift, and enter state 23

	identifier     goto state 76
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 77

State 62

	typeExpr -> typeAtom '->' . typeExpr                (rule 64)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 75

State 63

	typeExpr -> identifier ':' . typeExpr               (rule 68)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 74

State 64

	kindExpr -> kindExpr '->' . kindExpr                (rule 72)

	id             shift, and enter state 6

	identifier     goto state 11
	kindExpr       goto state 73

State 65

	dec -> ty identifier . kindAnnotation '=' typeExpr    (rule 83)
	dec -> ty identifier . kindAnnotation '=' typeExpr where tbindings    (rule 84)

	'='            reduce using rule 74
	'::'           shift, and enter state 71

	kindAnnotation goto state 72

State 66

	dec -> data identifier . kindAnnotation '=' dataExprs    (rule 81)
	dec -> data identifier . kindAnnotation '=' dataExprs where tbindings    (rule 82)

	'='            reduce using rule 74
	'::'           shift, and enter state 71

	kindAnnotation goto state 70

State 67

	dec -> let identifier . typeAnnotation kindAnnotation '=' expr    (rule 79)
	dec -> let identifier . typeAnnotation kindAnnotation '=' expr where bindings    (rule 80)

	':'            shift, and enter state 69
	'='            reduce using rule 69
	'::'           reduce using rule 69

	typeAnnotation goto state 68

State 68

	dec -> let identifier typeAnnotation . kindAnnotation '=' expr    (rule 79)
	dec -> let identifier typeAnnotation . kindAnnotation '=' expr where bindings    (rule 80)

	'='            reduce using rule 74
	'::'           shift, and enter state 71

	kindAnnotation goto state 113

State 69

	typeAnnotation -> ':' . typeExpr                    (rule 70)
	typeAnnotation -> ':' . typeExpr where tbindings    (rule 71)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 112

State 70

	dec -> data identifier kindAnnotation . '=' dataExprs    (rule 81)
	dec -> data identifier kindAnnotation . '=' dataExprs where tbindings    (rule 82)

	'='            shift, and enter state 111


State 71

	kindAnnotation -> '::' . kindExpr                   (rule 75)

	id             shift, and enter state 6

	identifier     goto state 11
	kindExpr       goto state 110

State 72

	dec -> ty identifier kindAnnotation . '=' typeExpr    (rule 83)
	dec -> ty identifier kindAnnotation . '=' typeExpr where tbindings    (rule 84)

	'='            shift, and enter state 109


State 73

	kindExpr -> kindExpr . '->' kindExpr                (rule 72)
	kindExpr -> kindExpr '->' kindExpr .                (rule 72)

	'->'           reduce using rule 72
	'='            reduce using rule 72
	%eof           reduce using rule 72


State 74

	typeExpr -> identifier ':' typeExpr .               (rule 68)

	let            reduce using rule 68
	where          reduce using rule 68
	data           reduce using rule 68
	ty             reduce using rule 68
	')'            reduce using rule 68
	'}'            reduce using rule 68
	';'            reduce using rule 68
	','            reduce using rule 68
	'='            reduce using rule 68
	'|'            reduce using rule 68
	'::'           reduce using rule 68
	%eof           reduce using rule 68


State 75

	typeExpr -> typeAtom '->' typeExpr .                (rule 64)

	let            reduce using rule 64
	where          reduce using rule 64
	data           reduce using rule 64
	ty             reduce using rule 64
	')'            reduce using rule 64
	'}'            reduce using rule 64
	';'            reduce using rule 64
	','            reduce using rule 64
	'='            reduce using rule 64
	'|'            reduce using rule 64
	'::'           reduce using rule 64
	%eof           reduce using rule 64


State 76

	typeAtom -> identifier .                            (rule 54)

	id             reduce using rule 54
	number         reduce using rule 54
	string         reduce using rule 54
	boolean        reduce using rule 54
	'!'            reduce using rule 54
	'('            reduce using rule 54
	'{'            reduce using rule 54


State 77

	typeArgs -> typeArgs typeAtom .                     (rule 57)

	id             reduce using rule 57
	number         reduce using rule 57
	string         reduce using rule 57
	boolean        reduce using rule 57
	'!'            reduce using rule 57
	'('            reduce using rule 57
	'{'            reduce using rule 57


State 78

	typeExpr -> typeAtom typeArgs '!' .                 (rule 66)

	let            reduce using rule 66
	where          reduce using rule 66
	data           reduce using rule 66
	ty             reduce using rule 66
	')'            reduce using rule 66
	'}'            reduce using rule 66
	';'            reduce using rule 66
	','            reduce using rule 66
	'='            reduce using rule 66
	'|'            reduce using rule 66
	'::'           reduce using rule 66
	%eof           reduce using rule 66


State 79

	ttuple -> '(' typeExpr ttupleElems . ')'            (rule 47)

	')'            shift, and enter state 108


State 80

	typeAtom -> '(' typeExpr ')' .                      (rule 55)

	id             reduce using rule 55
	number         reduce using rule 55
	string         reduce using rule 55
	boolean        reduce using rule 55
	'!'            reduce using rule 55
	let            reduce using rule 55
	where          reduce using rule 55
	data           reduce using rule 55
	ty             reduce using rule 55
	'('            reduce using rule 55
	')'            reduce using rule 55
	'{'            reduce using rule 55
	'}'            reduce using rule 55
	';'            reduce using rule 55
	','            reduce using rule 55
	'->'           reduce using rule 55
	'='            reduce using rule 55
	'|'            reduce using rule 55
	'::'           reduce using rule 55
	%eof           reduce using rule 55


State 81

	ttupleElems -> ',' . typeExpr                       (rule 45)
	ttupleElems -> ',' . typeExpr ttupleElems           (rule 46)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 107

State 82

	trecord -> '{' tpairs '}' .                         (rule 44)

	id             reduce using rule 44
	number         reduce using rule 44
	string         reduce using rule 44
	boolean        reduce using rule 44
	'!'            reduce using rule 44
	let            reduce using rule 44
	where          reduce using rule 44
	data           reduce using rule 44
	ty             reduce using rule 44
	'('            reduce using rule 44
	')'            reduce using rule 44
	'{'            reduce using rule 44
	'}'            reduce using rule 44
	';'            reduce using rule 44
	','            reduce using rule 44
	'->'           reduce using rule 44
	'='            reduce using rule 44
	'|'            reduce using rule 44
	'::'           reduce using rule 44
	%eof           reduce using rule 44


State 83

	tpairs -> identifier ':' . typeExpr ',' tpairs      (rule 42)
	tpairs -> identifier ':' . typeExpr                 (rule 43)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 106

State 84

	params -> params identifier .                       (rule 14)

	id             reduce using rule 14
	'->'           reduce using rule 14
	'=>'           reduce using rule 14


State 85

	typeExpr -> '\\' params '=>' . typeExpr             (rule 65)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 105

State 86

	args -> args atom .                                 (rule 16)

	id             reduce using rule 16
	number         reduce using rule 16
	string         reduce using rule 16
	boolean        reduce using rule 16
	'!'            reduce using rule 16
	'('            reduce using rule 16
	'{'            reduce using rule 16


State 87

	fnApplication -> atom args '!' .                    (rule 17)

	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	let            reduce using rule 17
	where          reduce using rule 17
	then           reduce using rule 17
	else           reduce using rule 17
	data           reduce using rule 17
	ty             reduce using rule 17
	')'            reduce using rule 17
	'}'            reduce using rule 17
	','            reduce using rule 17
	'.'            reduce using rule 17
	%eof           reduce using rule 17


State 88

	expr -> expr '.' identifier .                       (rule 36)

	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            reduce using rule 36
	'/'            reduce using rule 36
	let            reduce using rule 36
	where          reduce using rule 36
	then           reduce using rule 36
	else           reduce using rule 36
	data           reduce using rule 36
	ty             reduce using rule 36
	')'            reduce using rule 36
	'}'            reduce using rule 36
	','            reduce using rule 36
	'.'            reduce using rule 36
	%eof           reduce using rule 36


State 89

	expr -> expr . '.' identifier                       (rule 36)
	expr -> expr . '+' expr                             (rule 37)
	expr -> expr . '-' expr                             (rule 38)
	expr -> expr . '*' expr                             (rule 39)
	expr -> expr . '/' expr                             (rule 40)
	expr -> expr '/' expr .                             (rule 40)

	'+'            reduce using rule 40
	'-'            reduce using rule 40
	'*'            reduce using rule 40
	'/'            reduce using rule 40
	let            reduce using rule 40
	where          reduce using rule 40
	then           reduce using rule 40
	else           reduce using rule 40
	data           reduce using rule 40
	ty             reduce using rule 40
	')'            reduce using rule 40
	'}'            reduce using rule 40
	','            reduce using rule 40
	'.'            reduce using rule 40
	%eof           reduce using rule 40


State 90

	expr -> expr . '.' identifier                       (rule 36)
	expr -> expr . '+' expr                             (rule 37)
	expr -> expr . '-' expr                             (rule 38)
	expr -> expr . '*' expr                             (rule 39)
	expr -> expr '*' expr .                             (rule 39)
	expr -> expr . '/' expr                             (rule 40)

	'+'            reduce using rule 39
	'-'            reduce using rule 39
	'*'            reduce using rule 39
	'/'            reduce using rule 39
	let            reduce using rule 39
	where          reduce using rule 39
	then           reduce using rule 39
	else           reduce using rule 39
	data           reduce using rule 39
	ty             reduce using rule 39
	')'            reduce using rule 39
	'}'            reduce using rule 39
	','            reduce using rule 39
	'.'            reduce using rule 39
	%eof           reduce using rule 39


State 91

	expr -> expr . '.' identifier                       (rule 36)
	expr -> expr . '+' expr                             (rule 37)
	expr -> expr . '-' expr                             (rule 38)
	expr -> expr '-' expr .                             (rule 38)
	expr -> expr . '*' expr                             (rule 39)
	expr -> expr . '/' expr                             (rule 40)

	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	let            reduce using rule 38
	where          reduce using rule 38
	then           reduce using rule 38
	else           reduce using rule 38
	data           reduce using rule 38
	ty             reduce using rule 38
	')'            reduce using rule 38
	'}'            reduce using rule 38
	','            reduce using rule 38
	'.'            reduce using rule 38
	%eof           reduce using rule 38


State 92

	expr -> expr . '.' identifier                       (rule 36)
	expr -> expr . '+' expr                             (rule 37)
	expr -> expr '+' expr .                             (rule 37)
	expr -> expr . '-' expr                             (rule 38)
	expr -> expr . '*' expr                             (rule 39)
	expr -> expr . '/' expr                             (rule 40)

	'+'            reduce using rule 37
	'-'            reduce using rule 37
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	let            reduce using rule 37
	where          reduce using rule 37
	then           reduce using rule 37
	else           reduce using rule 37
	data           reduce using rule 37
	ty             reduce using rule 37
	')'            reduce using rule 37
	'}'            reduce using rule 37
	','            reduce using rule 37
	'.'            reduce using rule 37
	%eof           reduce using rule 37


State 93

	controlFlow -> if expr then . expr else expr        (rule 18)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 104

State 94

	tuple -> '(' expr tupleElems . ')'                  (rule 12)

	')'            shift, and enter state 103


State 95

	atom -> '(' expr ')' .                              (rule 26)

	id             reduce using rule 26
	number         reduce using rule 26
	string         reduce using rule 26
	boolean        reduce using rule 26
	'!'            reduce using rule 26
	'+'            reduce using rule 26
	'-'            reduce using rule 26
	'*'            reduce using rule 26
	'/'            reduce using rule 26
	let            reduce using rule 26
	where          reduce using rule 26
	then           reduce using rule 26
	else           reduce using rule 26
	data           reduce using rule 26
	ty             reduce using rule 26
	'('            reduce using rule 26
	')'            reduce using rule 26
	'{'            reduce using rule 26
	'}'            reduce using rule 26
	','            reduce using rule 26
	'.'            reduce using rule 26
	%eof           reduce using rule 26


State 96

	tupleElems -> ',' . expr                            (rule 10)
	tupleElems -> ',' . expr tupleElems                 (rule 11)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 102

State 97

	record -> '{' pairs '}' .                           (rule 9)

	id             reduce using rule 9
	number         reduce using rule 9
	string         reduce using rule 9
	boolean        reduce using rule 9
	'!'            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	let            reduce using rule 9
	where          reduce using rule 9
	then           reduce using rule 9
	else           reduce using rule 9
	data           reduce using rule 9
	ty             reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'{'            reduce using rule 9
	'}'            reduce using rule 9
	','            reduce using rule 9
	'.'            reduce using rule 9
	%eof           reduce using rule 9


State 98

	pairs -> identifier ':' . expr ',' pairs            (rule 7)
	pairs -> identifier ':' . expr                      (rule 8)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 101

State 99

	expr -> '\\' params '->' . expr                     (rule 33)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 100

State 100

	expr -> '\\' params '->' expr .                     (rule 33)
	expr -> expr . '.' identifier                       (rule 36)
	expr -> expr . '+' expr                             (rule 37)
	expr -> expr . '-' expr                             (rule 38)
	expr -> expr . '*' expr                             (rule 39)
	expr -> expr . '/' expr                             (rule 40)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	let            reduce using rule 33
	where          reduce using rule 33
	then           reduce using rule 33
	else           reduce using rule 33
	data           reduce using rule 33
	ty             reduce using rule 33
	')'            reduce using rule 33
	'}'            reduce using rule 33
	','            reduce using rule 33
	'.'            shift, and enter state 55
	%eof           reduce using rule 33


State 101

	pairs -> identifier ':' expr . ',' pairs            (rule 7)
	pairs -> identifier ':' expr .                      (rule 8)
	expr -> expr . '.' identifier                       (rule 36)
	expr -> expr . '+' expr                             (rule 37)
	expr -> expr . '-' expr                             (rule 38)
	expr -> expr . '*' expr                             (rule 39)
	expr -> expr . '/' expr                             (rule 40)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	'}'            reduce using rule 8
	','            shift, and enter state 124
	'.'            shift, and enter state 55


State 102

	tupleElems -> ',' expr .                            (rule 10)
	tupleElems -> ',' expr . tupleElems                 (rule 11)
	expr -> expr . '.' identifier                       (rule 36)
	expr -> expr . '+' expr                             (rule 37)
	expr -> expr . '-' expr                             (rule 38)
	expr -> expr . '*' expr                             (rule 39)
	expr -> expr . '/' expr                             (rule 40)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	')'            reduce using rule 10
	','            shift, and enter state 96
	'.'            shift, and enter state 55

	tupleElems     goto state 123

State 103

	tuple -> '(' expr tupleElems ')' .                  (rule 12)

	id             reduce using rule 12
	number         reduce using rule 12
	string         reduce using rule 12
	boolean        reduce using rule 12
	'!'            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	let            reduce using rule 12
	where          reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	data           reduce using rule 12
	ty             reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'{'            reduce using rule 12
	'}'            reduce using rule 12
	','            reduce using rule 12
	'.'            reduce using rule 12
	%eof           reduce using rule 12


State 104

	controlFlow -> if expr then expr . else expr        (rule 18)
	expr -> expr . '.' identifier                       (rule 36)
	expr -> expr . '+' expr                             (rule 37)
	expr -> expr . '-' expr                             (rule 38)
	expr -> expr . '*' expr                             (rule 39)
	expr -> expr . '/' expr                             (rule 40)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	else           shift, and enter state 122
	'.'            shift, and enter state 55


State 105

	typeExpr -> '\\' params '=>' typeExpr .             (rule 65)

	let            reduce using rule 65
	where          reduce using rule 65
	data           reduce using rule 65
	ty             reduce using rule 65
	')'            reduce using rule 65
	'}'            reduce using rule 65
	';'            reduce using rule 65
	','            reduce using rule 65
	'='            reduce using rule 65
	'|'            reduce using rule 65
	'::'           reduce using rule 65
	%eof           reduce using rule 65


State 106

	tpairs -> identifier ':' typeExpr . ',' tpairs      (rule 42)
	tpairs -> identifier ':' typeExpr .                 (rule 43)

	'}'            reduce using rule 43
	','            shift, and enter state 121


State 107

	ttupleElems -> ',' typeExpr .                       (rule 45)
	ttupleElems -> ',' typeExpr . ttupleElems           (rule 46)

	')'            reduce using rule 45
	','            shift, and enter state 81

	ttupleElems    goto state 120

State 108

	ttuple -> '(' typeExpr ttupleElems ')' .            (rule 47)

	id             reduce using rule 47
	number         reduce using rule 47
	string         reduce using rule 47
	boolean        reduce using rule 47
	'!'            reduce using rule 47
	let            reduce using rule 47
	where          reduce using rule 47
	data           reduce using rule 47
	ty             reduce using rule 47
	'('            reduce using rule 47
	')'            reduce using rule 47
	'{'            reduce using rule 47
	'}'            reduce using rule 47
	';'            reduce using rule 47
	','            reduce using rule 47
	'->'           reduce using rule 47
	'='            reduce using rule 47
	'|'            reduce using rule 47
	'::'           reduce using rule 47
	%eof           reduce using rule 47


State 109

	dec -> ty identifier kindAnnotation '=' . typeExpr    (rule 83)
	dec -> ty identifier kindAnnotation '=' . typeExpr where tbindings    (rule 84)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 119

State 110

	kindExpr -> kindExpr . '->' kindExpr                (rule 72)
	kindAnnotation -> '::' kindExpr .                   (rule 75)

	'->'           shift, and enter state 64
	'='            reduce using rule 75


State 111

	dec -> data identifier kindAnnotation '=' . dataExprs    (rule 81)
	dec -> data identifier kindAnnotation '=' . dataExprs where tbindings    (rule 82)

	id             shift, and enter state 6

	identifier     goto state 116
	dataExpr       goto state 117
	dataExprs      goto state 118

State 112

	typeAnnotation -> ':' typeExpr .                    (rule 70)
	typeAnnotation -> ':' typeExpr . where tbindings    (rule 71)

	where          shift, and enter state 115
	'='            reduce using rule 70
	'::'           reduce using rule 70


State 113

	dec -> let identifier typeAnnotation kindAnnotation . '=' expr    (rule 79)
	dec -> let identifier typeAnnotation kindAnnotation . '=' expr where bindings    (rule 80)

	'='            shift, and enter state 114


State 114

	dec -> let identifier typeAnnotation kindAnnotation '=' . expr    (rule 79)
	dec -> let identifier typeAnnotation kindAnnotation '=' . expr where bindings    (rule 80)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 135

State 115

	typeAnnotation -> ':' typeExpr where . tbindings    (rule 71)

	id             shift, and enter state 6

	identifier     goto state 132
	tbinding       goto state 133
	tbindings      goto state 134

State 116

	dataExpr -> identifier . ':' typeExpr               (rule 76)

	':'            shift, and enter state 131


State 117

	dataExprs -> dataExpr .                             (rule 77)

	let            reduce using rule 77
	where          reduce using rule 77
	data           reduce using rule 77
	ty             reduce using rule 77
	'|'            reduce using rule 77
	%eof           reduce using rule 77


State 118

	dataExprs -> dataExprs . '|' dataExpr               (rule 78)
	dec -> data identifier kindAnnotation '=' dataExprs .    (rule 81)
	dec -> data identifier kindAnnotation '=' dataExprs . where tbindings    (rule 82)

	let            reduce using rule 81
	where          shift, and enter state 129
	data           reduce using rule 81
	ty             reduce using rule 81
	'|'            shift, and enter state 130
	%eof           reduce using rule 81


State 119

	dec -> ty identifier kindAnnotation '=' typeExpr .    (rule 83)
	dec -> ty identifier kindAnnotation '=' typeExpr . where tbindings    (rule 84)

	let            reduce using rule 83
	where          shift, and enter state 128
	data           reduce using rule 83
	ty             reduce using rule 83
	%eof           reduce using rule 83


State 120

	ttupleElems -> ',' typeExpr ttupleElems .           (rule 46)

	')'            reduce using rule 46


State 121

	tpairs -> identifier ':' typeExpr ',' . tpairs      (rule 42)

	id             shift, and enter state 6
	'}'            reduce using rule 41

	identifier     goto state 58
	tpairs         goto state 127

State 122

	controlFlow -> if expr then expr else . expr        (rule 18)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 126

State 123

	tupleElems -> ',' expr tupleElems .                 (rule 11)

	')'            reduce using rule 11


State 124

	pairs -> identifier ':' expr ',' . pairs            (rule 7)

	id             shift, and enter state 6
	'}'            reduce using rule 6

	identifier     goto state 47
	pairs          goto state 125

State 125

	pairs -> identifier ':' expr ',' pairs .            (rule 7)

	'}'            reduce using rule 7


State 126

	controlFlow -> if expr then expr else expr .        (rule 18)
	expr -> expr . '.' identifier                       (rule 36)
	expr -> expr . '+' expr                             (rule 37)
	expr -> expr . '-' expr                             (rule 38)
	expr -> expr . '*' expr                             (rule 39)
	expr -> expr . '/' expr                             (rule 40)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	let            reduce using rule 18
	where          reduce using rule 18
	then           reduce using rule 18
	else           reduce using rule 18
	data           reduce using rule 18
	ty             reduce using rule 18
	')'            reduce using rule 18
	'}'            reduce using rule 18
	','            reduce using rule 18
	'.'            shift, and enter state 55
	%eof           reduce using rule 18


State 127

	tpairs -> identifier ':' typeExpr ',' tpairs .      (rule 42)

	'}'            reduce using rule 42


State 128

	dec -> ty identifier kindAnnotation '=' typeExpr where . tbindings    (rule 84)

	id             shift, and enter state 6

	identifier     goto state 132
	tbinding       goto state 133
	tbindings      goto state 145

State 129

	dec -> data identifier kindAnnotation '=' dataExprs where . tbindings    (rule 82)

	id             shift, and enter state 6

	identifier     goto state 132
	tbinding       goto state 133
	tbindings      goto state 144

State 130

	dataExprs -> dataExprs '|' . dataExpr               (rule 78)

	id             shift, and enter state 6

	identifier     goto state 116
	dataExpr       goto state 143

State 131

	dataExpr -> identifier ':' . typeExpr               (rule 76)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 142

State 132

	tbinding -> identifier . '=' typeExpr               (rule 58)
	tbinding -> identifier . implements typeExpr        (rule 59)
	tbinding -> identifier . '|->' typeExpr             (rule 60)
	tbinding -> identifier . '|' typeExpr               (rule 61)

	implements     shift, and enter state 138
	'|->'          shift, and enter state 139
	'='            shift, and enter state 140
	'|'            shift, and enter state 141


State 133

	tbindings -> tbinding .                             (rule 62)

	let            reduce using rule 62
	data           reduce using rule 62
	ty             reduce using rule 62
	';'            reduce using rule 62
	'='            reduce using rule 62
	'::'           reduce using rule 62
	%eof           reduce using rule 62


State 134

	tbindings -> tbindings . ';' tbinding               (rule 63)
	typeAnnotation -> ':' typeExpr where tbindings .    (rule 71)

	';'            shift, and enter state 137
	'='            reduce using rule 71
	'::'           reduce using rule 71


State 135

	expr -> expr . '.' identifier                       (rule 36)
	expr -> expr . '+' expr                             (rule 37)
	expr -> expr . '-' expr                             (rule 38)
	expr -> expr . '*' expr                             (rule 39)
	expr -> expr . '/' expr                             (rule 40)
	dec -> let identifier typeAnnotation kindAnnotation '=' expr .    (rule 79)
	dec -> let identifier typeAnnotation kindAnnotation '=' expr . where bindings    (rule 80)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	let            reduce using rule 79
	where          shift, and enter state 136
	data           reduce using rule 79
	ty             reduce using rule 79
	'.'            shift, and enter state 55
	%eof           reduce using rule 79


State 136

	dec -> let identifier typeAnnotation kindAnnotation '=' expr where . bindings    (rule 80)

	id             shift, and enter state 6

	identifier     goto state 151
	binding        goto state 152
	bindings       goto state 153

State 137

	tbindings -> tbindings ';' . tbinding               (rule 63)

	id             shift, and enter state 6

	identifier     goto state 132
	tbinding       goto state 150

State 138

	tbinding -> identifier implements . typeExpr        (rule 59)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 149

State 139

	tbinding -> identifier '|->' . typeExpr             (rule 60)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 148

State 140

	tbinding -> identifier '=' . typeExpr               (rule 58)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 147

State 141

	tbinding -> identifier '|' . typeExpr               (rule 61)

	id             shift, and enter state 6
	number         shift, and enter state 19
	string         shift, and enter state 20
	boolean        shift, and enter state 21
	'('            shift, and enter state 22
	'{'            shift, and enter state 23
	'\\'           shift, and enter state 24

	identifier     goto state 13
	trecord        goto state 14
	ttuple         goto state 15
	type           goto state 16
	typeAtom       goto state 17
	typeExpr       goto state 146

State 142

	dataExpr -> identifier ':' typeExpr .               (rule 76)

	let            reduce using rule 76
	where          reduce using rule 76
	data           reduce using rule 76
	ty             reduce using rule 76
	'|'            reduce using rule 76
	%eof           reduce using rule 76


State 143

	dataExprs -> dataExprs '|' dataExpr .               (rule 78)

	let            reduce using rule 78
	where          reduce using rule 78
	data           reduce using rule 78
	ty             reduce using rule 78
	'|'            reduce using rule 78
	%eof           reduce using rule 78


State 144

	tbindings -> tbindings . ';' tbinding               (rule 63)
	dec -> data identifier kindAnnotation '=' dataExprs where tbindings .    (rule 82)

	let            reduce using rule 82
	data           reduce using rule 82
	ty             reduce using rule 82
	';'            shift, and enter state 137
	%eof           reduce using rule 82


State 145

	tbindings -> tbindings . ';' tbinding               (rule 63)
	dec -> ty identifier kindAnnotation '=' typeExpr where tbindings .    (rule 84)

	let            reduce using rule 84
	data           reduce using rule 84
	ty             reduce using rule 84
	';'            shift, and enter state 137
	%eof           reduce using rule 84


State 146

	tbinding -> identifier '|' typeExpr .               (rule 61)

	let            reduce using rule 61
	data           reduce using rule 61
	ty             reduce using rule 61
	';'            reduce using rule 61
	'='            reduce using rule 61
	'::'           reduce using rule 61
	%eof           reduce using rule 61


State 147

	tbinding -> identifier '=' typeExpr .               (rule 58)

	let            reduce using rule 58
	data           reduce using rule 58
	ty             reduce using rule 58
	';'            reduce using rule 58
	'='            reduce using rule 58
	'::'           reduce using rule 58
	%eof           reduce using rule 58


State 148

	tbinding -> identifier '|->' typeExpr .             (rule 60)

	let            reduce using rule 60
	data           reduce using rule 60
	ty             reduce using rule 60
	';'            reduce using rule 60
	'='            reduce using rule 60
	'::'           reduce using rule 60
	%eof           reduce using rule 60


State 149

	tbinding -> identifier implements typeExpr .        (rule 59)

	let            reduce using rule 59
	data           reduce using rule 59
	ty             reduce using rule 59
	';'            reduce using rule 59
	'='            reduce using rule 59
	'::'           reduce using rule 59
	%eof           reduce using rule 59


State 150

	tbindings -> tbindings ';' tbinding .               (rule 63)

	let            reduce using rule 63
	data           reduce using rule 63
	ty             reduce using rule 63
	';'            reduce using rule 63
	'='            reduce using rule 63
	'::'           reduce using rule 63
	%eof           reduce using rule 63


State 151

	binding -> identifier . '=' expr                    (rule 28)

	'='            shift, and enter state 155


State 152

	bindings -> binding .                               (rule 29)

	let            reduce using rule 29
	data           reduce using rule 29
	ty             reduce using rule 29
	','            reduce using rule 29
	%eof           reduce using rule 29


State 153

	bindings -> bindings . ',' binding                  (rule 30)
	dec -> let identifier typeAnnotation kindAnnotation '=' expr where bindings .    (rule 80)

	let            reduce using rule 80
	data           reduce using rule 80
	ty             reduce using rule 80
	','            shift, and enter state 154
	%eof           reduce using rule 80


State 154

	bindings -> bindings ',' . binding                  (rule 30)

	id             shift, and enter state 6

	identifier     goto state 151
	binding        goto state 157

State 155

	binding -> identifier '=' . expr                    (rule 28)

	id             shift, and enter state 6
	number         shift, and enter state 33
	string         shift, and enter state 34
	boolean        shift, and enter state 35
	if             shift, and enter state 36
	'('            shift, and enter state 37
	'{'            shift, and enter state 38
	'.'            shift, and enter state 39
	'\\'           shift, and enter state 40

	identifier     goto state 25
	record         goto state 26
	tuple          goto state 27
	fnApplication  goto state 28
	controlFlow    goto state 29
	term           goto state 30
	atom           goto state 31
	expr           goto state 156

State 156

	binding -> identifier '=' expr .                    (rule 28)
	expr -> expr . '.' identifier                       (rule 36)
	expr -> expr . '+' expr                             (rule 37)
	expr -> expr . '-' expr                             (rule 38)
	expr -> expr . '*' expr                             (rule 39)
	expr -> expr . '/' expr                             (rule 40)

	'+'            shift, and enter state 51
	'-'            shift, and enter state 52
	'*'            shift, and enter state 53
	'/'            shift, and enter state 54
	let            reduce using rule 28
	data           reduce using rule 28
	ty             reduce using rule 28
	','            reduce using rule 28
	'.'            shift, and enter state 55
	%eof           reduce using rule 28


State 157

	bindings -> bindings ',' binding .                  (rule 30)

	let            reduce using rule 30
	data           reduce using rule 30
	ty             reduce using rule 30
	','            reduce using rule 30
	%eof           reduce using rule 30


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 88
Number of terminals: 61
Number of non-terminals: 38
Number of states: 158
